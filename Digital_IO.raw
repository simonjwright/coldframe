<domain>
<extractor>cf-20021204a</extractor>
<name>Digital IO</name>
<date>
<year>2002</year>
<month>12</month>
<day>30</day>
<time>16:52</time>
</date>
<documentation>This domain manages digital (discrete) input/output.
It is intended for simulations only, so there is no actual digital I/.O, only support for an HCI.

[[ revision : $Id: Digital_IO.raw,v 001fa38a3c0f 2002/12/30 18:02:08 simon $ ]]</documentation>
<classes>
<class>
<name>Signal</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Signals may be Input (from the hardware or HCI) or Output (to the hardware or HCI).</documentation>
<attributes>
<attribute stereotype="id">
<name>s</name>
<documentation></documentation>
<type>Signal Name</type>
<initial></initial>
</attribute>
<attribute>
<name>state</name>
<documentation></documentation>
<type>Boolean</type>
<initial>False</initial>
</attribute>
</attributes>
<operations>
<operation stereotype="init">
<name>initialize</name>
<documentation>Creates all the Signals.</documentation>
<parameters>
</parameters>
</operation>
<operation stereotype="abstract">
<name>changed</name>
<documentation>Called when a signal has changed.</documentation>
<parameters>
</parameters>
</operation>
<operation stereotype="accessor">
<name>get s</name>
<documentation></documentation>
<return>Signal Name</return>
<parameters>
</parameters>
</operation>
<operation>
<name>set state</name>
<documentation>Set the signal's state as indicated; call Changed if it has changed.</documentation>
<parameters>
<parameter>
<name>to</name>
<documentation></documentation>
<type>Boolean</type>
<initial></initial>
</parameter>
</parameters>
</operation>
<operation stereotype="accessor">
<name>get state</name>
<documentation></documentation>
<return>Boolean</return>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class>
<name>Input</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Input Signals (from the hardware or, in this case, the HCI) support change notification via callback.</documentation>
<attributes>
</attributes>
<operations>
<operation>
<name>changed</name>
<documentation>Called when the signal has changed state; notify any registered observers of Signal State.</documentation>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class>
<name>Output</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Output signals are polled by the HCI.</documentation>
<attributes>
</attributes>
<operations>
<operation>
<name>changed</name>
<documentation>Called when the signal has changed; no action for output signals (the HCI polls).</documentation>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Signal State</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Provides application domains with callback facilities for input signal state changes.

[[callback : 5 ]]</documentation>
<attributes>
<attribute>
<name>s</name>
<documentation>The name of the signal that has changed.</documentation>
<type>Signal Name</type>
<initial></initial>
</attribute>
<attribute>
<name>state</name>
<documentation>The state that the signal has changed to.</documentation>
<type>Boolean</type>
<initial></initial>
</attribute>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="public">
<name>Application</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The interface offered to support applications.
State changes are visible via callback on Signal State.</documentation>
<attributes>
</attributes>
<operations>
<operation>
<name>set output</name>
<documentation>Sets the specified output signal to the given state.</documentation>
<parameters>
<parameter>
<name>s</name>
<documentation></documentation>
<type>Signal Name</type>
<initial></initial>
</parameter>
<parameter>
<name>to state</name>
<documentation></documentation>
<type>Boolean</type>
<initial></initial>
</parameter>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class stereotype="public">
<name>HCI</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The interface offered to support HCI.</documentation>
<attributes>
</attributes>
<operations>
<operation>
<name>get state</name>
<documentation>Returns the state of the specified signal.</documentation>
<return>Boolean</return>
<parameters>
<parameter>
<name>of signal</name>
<documentation></documentation>
<type>Signal Name</type>
<initial></initial>
</parameter>
</parameters>
</operation>
<operation>
<name>set input</name>
<documentation>Sets the specified input signal to the given value.</documentation>
<parameters>
<parameter>
<name>of signal</name>
<documentation></documentation>
<type>Signal Name</type>
<initial></initial>
</parameter>
<parameter>
<name>to</name>
<documentation></documentation>
<type>Boolean</type>
<initial></initial>
</parameter>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Signal Name</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Names the supported digital signals.
The 'floor' signals are inputs, the 'lamp' signals are outputs.

[[ enumeration:
floor 0,
floor 1,
floor 2,
floor 3,
lamp a,
lamp b,
lamp c,
lamp d
]]</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
</classes>
<relationships>
<inheritance>
<name>g1</name>
<documentation></documentation>
<child>Input</child>
<parent>Signal</parent>
</inheritance>
<inheritance>
<name>g1</name>
<documentation></documentation>
<child>Output</child>
<parent>Signal</parent>
</inheritance>
</relationships>
</domain>
