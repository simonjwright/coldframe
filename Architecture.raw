<domain>
<extractor>cf-20030322t</extractor>
<name>Architecture</name>
<date>
<year>2003</year>
<month>3</month>
<day>28</day>
<time>06:56</time>
</date>
<documentation>This package describes the underlying model of the model assumed by ColdFrame (the metamodel) and one possible mapping to code.<br/>

A note on names: Ada is case-insensitive, but the convention is that words in names are separated by an underscore, and the first letter of each word is capitalized. ColdFrame normalizes names to this convention.</documentation>
<classes>
<class>
<name>Associable Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>It is permitted to form Associations between Associable Classes, which are all classes except Public Classes.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Public Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Public Class is one that provides functionality to external users (other Domains).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Private Singleton Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Private Singleton Class is a Singleton that (depending on the code generation strategy) isn't visible outside the Domain.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Specialization</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Specialization is a Relationship between a Supertype (the parent) and a number of Subtypes (children).<br/>

Multiple Inheritance is supported.<br/>

Often, specialization is used when different subtypes have different relationships.<br/>

Normally, for each instance of a parent class, there is a corresponding instance of one of the child classes (so that, in a sense, the parent is abstract). A possible optimization is to omit code for child classes that don't have any attributes of their own, or which don't participate in any relationships of their own.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Association</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Association relates two primary Classes.<br/>

</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Simple Association</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Simple Association has no Associative Class.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Associative Association</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Associative Association implements its parent Association using a third class, the Association Class.<br/>

Often this is necessary to implement a many-to-many association, though it is also appropriate when there is imformation that only applies when the primary association exists; for example, even though Driver owns Vehicle is one-to-many, Excise Licence might be appropriate as an associative class for the association (since Date Of Issue has nowhere else to live).<br/>

A convenient notation for associative associations is <i>desc_c-(desc_a:desc_b)</i>, where <i>a</i> and <i>b</i> are the primary classes, <i>c</i> is the associative class, and <i>desc</i> indicates the multiplicity and conditionality: <tt>1</tt> means one, <tt>m</tt> means many, and <tt>c</tt> means conditional.<br/>

At present (6 June 2001) the following are <b>not</b> supported:<br/>

m-(anything)</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Relationship</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Relationship reflects some degree of interaction between a number of Classes.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Parameter</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Operation may have Parameters. Each Parameter
has:<br/>

a <b>Name</b><br/>

a <b>Type</b> (either standard, such as <tt>Integer</tt>, or as defined in one of this Domain's Type Specifications)<br/>

optionally, a <b>Mode</b>, specified in a documentation annotation <tt>[[mode: <i>mode-spec</i>]]</tt>, where <tt><i>mode-spec</i></tt> is <tt>in</tt> (the default), <tt>out</tt>, or <tt>inout</tt><br/>

optionally, a <b>Default</b> value.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Plain Attribute</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Plain Attribute is an Attribute that isn't an Identifying Attribute. It may have an initial value.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Domain</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The Domain corresponds to a package in the logical view. It ought to be about some well-defined subject matter (for example, best not to mix GUI with the underlying subject of your application).<br/>

At present, only model objects (Classes, Relationships) that exist in the Domain Package are extracted by the Rose extractor <tt>extractor.ebs</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Class denotes a set of objects in the Domain that have common properties and behaviour.<br/>

You can specify the maximum number of Instances using the documentation annotation <tt>[[ max: <i>number</i> ]]</tt>. This will be ignored for Singleton Classes.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Class Operation is one that applies to the set of all instances of the Class (for example, the count of the current number of instances).<br/>

Class Operations are denoted by the stereotype "class" or by the documentation annotation <tt>[[class]]</tt>.<br/>

All operations of Public Classes are class operations. The same is, in a sense, true of Singleton classes, but here there may be a useful distinction.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Operation is an encapsulated aspect of the behaviour of a Class, or an instance of a Class (typically corresponding to a method or subprogram).<br/>

Operations may have return values.

</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Identifier</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The Identifier of a Normal Class uniquely distinguishes one instance of the Class from another, No two instances may have the same Identifier (at the same time). The identifier of an instance cannot change.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Attribute</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Attributes are described by a Name and a Type.<br/></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Identifying Attribute</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Identifying Attribute is one that is part of the Class' Identifier. Any initial value is ignored.<br/>

An Identifying Attribute is marked as such by the stereotype "id" or the documentation annotation <tt>[[id]]</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Instance Operation of a Class is an Operation that applies to a specific instance of the Class.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Singleton Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Singleton Class is one of which there is always precisely one instance.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Type Specification</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The Domain can contain a number of domain-specific type definitions.<br/>

A Type Specification is a class with the "type" stereotype.<br/>

If the class has attributes, this is a Record Type.

Otherwise, it's a Plain Type, and its documentation must contain an Annotation, which is text contained in double square brackets (<tt>[[<i>annotation</i>]]</tt>).<br/>

Supported annotations are:<br/>

<tt>enumeration: <i>literal 1</i>, <i>literal 2</i> ...</tt>; defines an enumeration.<br/>

<tt>real: digits <i>9</i>, lower <i>0.0</i>, upper <i>100.0</i></tt>; defines a real number.<br/>

<tt>counterpart</tt>; means that the actual type is an instance of another domain.<br/>

<tt>string: max <i>80</i></tt>; defines a bounded string.

<tt>imported : <i>GNAT.Sockets</i></tt>; states that the given type is found in the stated Ada package.

<tt>renames : <i>GNAT.Sockets.Port_Type</i></tt>; states that the given type is a renaming  of the stated Ada type.

</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Child Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Child Class is one which may have any number of instances, and which is a child in one or more inheritance (specialisation) relationships</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Normal Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Normal Class is one which may have any number of instances, each uniquely distingusihed by the Class' Identifier, which is specified by the Analyst.<br/>

All Multiple Class instances will in fact have identifying record components, but ColdFrame inserts them automatically in the case of Child or Association Classes.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Association Class</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Association Class is one which may have any number of instances, and which implementes an Associative Association.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Event Type</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Events are always attached to Classes. They may be directed to specific instances (in which case it's assumed that they are intended to drive a state machine) or to the Class, in which case they probably correspond to external events.<br/>
They may carry a Payload (corresponding to a particular Type Specification).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Event Type</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Instance Events are sent to particular instances of the Class they are associated with.It's not possible to specify handler operations (instance events are used only by state machines)..</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class Event Type</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Class Events are handled by a Class Operation of their associated Class.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Referential Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Referential Component is a kind of Attribute that formalizes a Relationship. They are automatically inserted by <tt>normalize-rose.tcl</tt>.<br/>

The translation strategy for referential components is determined at code generation. For example, it might be proper to
<ul>
<li>insert a copy of each of the source Class' Identifying Attributes,</li>
<li>insert a pointer to the source Class, or </li>
<li>implement the relationship in some third class.</li>
</ul>

ColdFrame's Ada generator inserts a pointer to the source Class (<tt>ColdFrame.Instances.Handle</tt>).


</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Specialization Referential Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Specialization Referential Component formalizes a Specialization. It always appears in the child class, and is the Identifier for that class (or, in the case of multiple inheritance, part of the identifier).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Associative Referential Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Type Decoration</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Type decorations specify additional translation requirements.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Callback</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Callback decoration specifies that support for the Callback or Observer pattern is to be generated, so that (in a layered architecture) higher domains can be informed of changes in which they have registered an interest without the lower domain needing to be aware of the higher domain.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Serializable</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Serializable decoration uses the <tt>[[ Serializable ]]</tt> annotation.<br/>

Serializable types can be streamed to an output medium.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Standard Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Standard Component does not assist in formalizing any Relationship.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Association Collective Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Associative Navigation Operation comes in two overloadings, one from single instances and one from sets of instances. In the latter case, the result is a true set (each destination instance appears only once).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Reverse Associative Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Forward Associative Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Reverse Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Forward Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Callback Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Callback Type Specification maps to a Callback Package, named <tt><i>Domain.Type</i>_Callback</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Association Navigation Operation</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Given an instance of the Class at one end of a Association, Navigation finds the instance or set of instances of the Class at the other end of the Association.<br/>

Whether a single instance or a set is returned depends on the cardinality of the Association.<br/>

The result, or result set, may be respectively null, or empty, depending on the conditionality of the Association.<br/>

For an Association with an Associative Class, Navigation is also provided between either end of the Association and the Associative Class.

</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Association Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Association maps to an Association Package with the name <tt><i>Domain</i>.<i>Association</i></tt>.<br/>

The package is private.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Abstract Containers Package</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has an Abstract Containers Package (<tt><i>Domain.Class</i>.Abstract_Containers</tt>) which can be instantiated as Containers for references (<tt>Handle</tt>s) to all or some of the Instances.<br/>

The prime functionality supplied is iteration over Containers.
</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Delete Procedure</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package contains two <tt>Delete</tt> procedures.<br/>

One takes an Identifier Record as parameter, the other takes a  <tt>Handle</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Public Class Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Public Class is implemented as a publicly-visible child of the Domain package.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Find Function</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package contains a <tt>Find</tt> function which, given an Identifier Record, returns a <tt>Handle</tt> for the corresponding Instance record or <tt>null</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Create Function</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package contains a <tt>Create</tt> function which, given an Identifier Record, returns a <tt>Handle</tt> for the newly created  Instance record.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Filter Function</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has a generic Filter Function (<tt><i>Domain.Class</i>.Filter_Function</tt>) which, given  a Collection of references (<tt>Handle</tt>s) to a subset of the current Instances, returns a Collection of those that match some criterion.<br/>

The generic parameter is a function which, given a <tt>Handle</tt>, determines whether the designated Instance is to be included in the result.</documentation>
<parameters>
</parameters>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Selection Function</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has a generic Selection Function (<tt><i>Domain.Class</i>.Selection_Function</tt>) which returns a Collection of references (<tt>Handle</tt>s) to a subset of the current Instances.<br/>

The generic parameter is a function which, given a <tt>Handle</tt>, determines whether the designated Instance is to be included in the result.</documentation>
<parameters>
</parameters>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>All Instances Function</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has an All Instances Function (<tt><i>Domain.Class</i>.All_Instances</tt>) which returns a Collection of references (<tt>Handle</tt>s) to all of the current Instances.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Collections Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has a Collections Package (<tt><i>Domain.Class</i>.Collections</tt>) which can be used to hold references (<tt>Handle</tt>s) to all or some of the Instances.<br/>

A particular collection is only a snapshot; the validity of a <tt>Handle</tt> depends only on whether it is still current within the Identified Class Package.<br/>

The Collections Package is an instantiation of the Abstract Containers Package.
</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Param</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Parameter maps to a Param.<br/>

The Parameter's Name, Type, Mode and Default map to the natural Ada equivalents. Note that no semantic checks are made; it's the user's responsibility not to specify <tt>out</tt> or <tt>in out</tt> Modes for any parameter of a function, or a Default for a non-<tt>in</tt> Parameter.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Handle</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The Private Class Package provides a <tt>Handle</tt> type, which is an access type for the private <tt>Instance</tt> record.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Set Accessor</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>If an operation matches the profile of a set accessor, a working proper body will be generated.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Get Accessor</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>If an operation matches the profile of a get accessor, a working proper body will be generated.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class Subprogram</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Class Subprogram has no <tt>This</tt> parameter to indicate the instance concerned.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Subprogram</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Instance Subprogram has a <tt>This : Handle</tt> parameter to indicate the instance concerned (unless the class is a singleton, in which case the parameter isn't required).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Operation Subprogram</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Operation maps to an Operation Subprogram.<br/>

An Operation Subprogram is implemented as a subprogram in the Class package, with a separate body.<br/>

When the Operation has a return value, the Operation Subprogram is implemented as a function; otherwise as a procedure.<br/>

Except for accessor operations, a default compilable body is generated, which if called will raise <tt>Program_Error</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Singleton Class Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Private Singleton Class is implemented as a private child of the Domain package.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Identified Class Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>An Identified Class is implemented as a private child of the Domain package.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class Package</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Class in the Domain is implemented as a child package of the Domain Package; the package name is <tt><i>Domain.Class</i></tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Hash Function</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Hash Function is required for each Identifier Record Type. It is implemented as a separate function of the Class Package, named <tt><i>Domain.Class</i>.Hash</tt>. The default implementation returns a usable, but perhaps not optimal, hash value.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>User Type Declaration</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>User Type Definitions are type definitions in the top-level Domain package.<br/>

Most are obvious; however,<br/>

Bounded strings are implemented as instantiations of <tt>Ada.Strings.Bounded.Generic_Bounded_Length</tt>, and a hash function <tt><i>Domain.Type Specification</i>_Hash</tt> is created as a child of the Domain package in case Attributes of the type are used in Identifiers.<br/>
<i>Time</i> and <i>Date</i> translate to <tt>ColdFrame.Project.Calendar.Time</tt><br/>
<i>Text</i> translates to <tt>Ada.String.Unbounded.Unbounded_String</tt>.<br/>

Types are generated in an appropriate order, so that record types can contain components of other types (including record types).
</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Domain Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Domain maps to a single top-level package, with the name <tt><i>Domain</i></tt>.<br/>

The notation <tt><i>metaclass name</i></tt> means "the normalized name of the metaclass in this model"; so, if the Domain were named "Problem Reporting", <tt><i>Domain</i></tt> would be <tt>Problem_Reporting</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Record Type</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Class attributes (and relationship formalizations) are held in a private Instance record type.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Identifier Record Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>If there is an Identifier Record Type, its components are selected from the Instance Record Components.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Record Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>The Instance Record Type contains record components.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Analysis Component</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Analysis components correspond directly to Attributes in the model.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Identifier Record Type</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>A Multiple Class's Identifier maps to an Identifier Record type declared in the Identified Class Package (named <tt>Identifier</tt>) containing one component for each Identifying Attribute.<br/>

All Multiple Class instances will in fact have identifying record components, but ColdFrame inserts them automatically in the case of Child or Association Classes.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Private Class Package</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Private classes are implemented with a Handle, allowing access to the Instance Record.<br/>

This allows associations to be formalized.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Abstract Collections Package</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>This package is part of the Booch Components mechanism, and of no interest to users.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Abstract Sets Package</name>
<abstract/>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>This package is part of the Booch Components mechanism, and of no interest to users.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Sets Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Each Identified Class Package has a Sets Package (<tt><i>Domain.Class</i>.Sets</tt>) which can be used to hold mathematical sets of references (<tt>Handle</tt>s) to all or some of the Instances.<br/>

The Sets are used in Association Navigations.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Class Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Queued Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Held Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Dispatcher</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Instance</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Timer</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Irrevocable Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Revokable Event</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Serializable Package</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>If any types are marked <i>serializable</i>, a package <tt><i>Domain</i>.Serializable</tt> is generated; for each serializable type, it contains a corresponding type which is derived from <tt>ColdFrame.Project.Serialization.Base</tt> and contains an instance of the user's type as payload.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Generatable</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Working code can be generated for some kinds of operation (particularly attribute accessors).</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class>
<name>Non Generatable</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>Where working code can't be generated, the proper body raises <tt>Program_Error</tt>.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
</classes>
<relationships>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Domain</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Domain Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class Package</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>User Type Declaration</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Operation Subprogram</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identifying Attribute</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identifier</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Plain Attribute</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Type Specification</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Operation</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Parameter</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Operation Subprogram</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Parameter</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Operation Subprogram</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Param</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Collections Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>All Instances Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Selection Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Filter Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Create Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Find Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Delete Procedure</classname>
<cardinality>2</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Abstract Containers Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Domain Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Association Package</classname>
<cardinality>n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Callback Package</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association Collective Navigation Operation</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Association Navigation Operation</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Association Navigation Operation</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name>role a</name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Associable Class</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name>role b</name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Associable Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name>role a</name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Associable Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Normal Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identifier</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name>role c</name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Association Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Associative Association</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name>inheritance</name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Multiple Class</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Child Class</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<associative>Specialization</associative>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Operation</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Event Type</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Type Specification</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Event Type</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Class Operation</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class Event Type</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Type Decoration</classname>
<cardinality>0..2</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Type Specification</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<inheritance>
<name>singleton kind</name>
<documentation></documentation>
<child>Public Class</child>
<parent>Singleton Class</parent>
</inheritance>
<inheritance>
<name>singleton kind</name>
<documentation></documentation>
<child>Private Singleton Class</child>
<parent>Singleton Class</parent>
</inheritance>
<inheritance>
<name>associable kind</name>
<documentation></documentation>
<child>Private Singleton Class</child>
<parent>Associable Class</parent>
</inheritance>
<inheritance>
<name>relationship kind</name>
<documentation></documentation>
<child>Specialization</child>
<parent>Relationship</parent>
</inheritance>
<inheritance>
<name>relationship kind</name>
<documentation></documentation>
<child>Association</child>
<parent>Relationship</parent>
</inheritance>
<inheritance>
<name>assoc kind</name>
<documentation></documentation>
<child>Simple Association</child>
<parent>Association</parent>
</inheritance>
<inheritance>
<name>assoc kind</name>
<documentation></documentation>
<child>Associative Association</child>
<parent>Association</parent>
</inheritance>
<inheritance>
<name>attribute kind</name>
<documentation></documentation>
<child>Plain Attribute</child>
<parent>Attribute</parent>
</inheritance>
<inheritance>
<name>operation kind</name>
<documentation></documentation>
<child>Class Operation</child>
<parent>Operation</parent>
</inheritance>
<inheritance>
<name>attribute kind</name>
<documentation></documentation>
<child>Identifying Attribute</child>
<parent>Attribute</parent>
</inheritance>
<inheritance>
<name>operation kind</name>
<documentation></documentation>
<child>Instance Operation</child>
<parent>Operation</parent>
</inheritance>
<inheritance>
<name>cardinality</name>
<documentation></documentation>
<child>Singleton Class</child>
<parent>Class</parent>
</inheritance>
<inheritance>
<name>class kind</name>
<documentation></documentation>
<child>Child Class</child>
<parent>Multiple Class</parent>
</inheritance>
<inheritance>
<name>class kind</name>
<documentation></documentation>
<child>Normal Class</child>
<parent>Multiple Class</parent>
</inheritance>
<inheritance>
<name>class kind</name>
<documentation></documentation>
<child>Association Class</child>
<parent>Multiple Class</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Instance Event Type</child>
<parent>Event Type</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Class Event Type</child>
<parent>Event Type</parent>
</inheritance>
<inheritance>
<name>component kind</name>
<documentation></documentation>
<child>Referential Component</child>
<parent>Attribute</parent>
</inheritance>
<inheritance>
<name>component kind</name>
<documentation></documentation>
<child>Referential Component</child>
<parent>Instance Record Component</parent>
</inheritance>
<inheritance>
<name>reference kind</name>
<documentation></documentation>
<child>Specialization Referential Component</child>
<parent>Referential Component</parent>
</inheritance>
<inheritance>
<name>reference kind</name>
<documentation></documentation>
<child>Associative Referential Component</child>
<parent>Referential Component</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Callback</child>
<parent>Type Decoration</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Serializable</child>
<parent>Type Decoration</parent>
</inheritance>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Instance Record Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Instance Record Component</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Instance Record Type</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identifier Record Component</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identifier Record Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Handle</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Private Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Identifier Record Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classfame>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Hash Function</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Abstract Collections Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Abstract Sets Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Sets Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Identified Class Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Event</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Event Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name>is posted on</name>
<classname>Dispatcher</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Queued Event</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name>is held on</name>
<classname>Dispatcher</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Held Event</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Timer</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Instance</classname>
<cardinality></cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Instance</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name>is directed to</name>
<classname>Instance</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Instance Event</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Domain</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Dispatcher</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Dispatcher</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Instance Event</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Instance Event Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Class Event</classname>
<cardinality>0..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Class Event Type</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Revokable Event</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Timer</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Callback Package</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>User Type Declaration</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Serializable Package</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>Domain Package</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<association>
<name></name>
<documentation></documentation>
<role><end>1</end>
<name></name>
<classname>Serializable Package</classname>
<cardinality>0..1</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name></name>
<classname>User Type Declaration</classname>
<cardinality>1</cardinality>
<documentation></documentation>
</role>
</association>
<inheritance>
<name>component kind</name>
<documentation></documentation>
<child>Standard Component</child>
<parent>Attribute</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Reverse Associative Navigation Operation</child>
<parent>Association Navigation Operation</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Forward Associative Navigation Operation</child>
<parent>Association Navigation Operation</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Reverse Navigation Operation</child>
<parent>Association Navigation Operation</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Forward Navigation Operation</child>
<parent>Association Navigation Operation</parent>
</inheritance>
<inheritance>
<name>class package kind</name>
<documentation></documentation>
<child>Public Class Package</child>
<parent>Class Package</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Set Accessor</child>
<parent>Generatable</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Get Accessor</child>
<parent>Generatable</parent>
</inheritance>
<inheritance>
<name>operation subprogram kind</name>
<documentation></documentation>
<child>Class Subprogram</child>
<parent>Operation Subprogram</parent>
</inheritance>
<inheritance>
<name>operation subprogram kind</name>
<documentation></documentation>
<child>Instance Subprogram</child>
<parent>Operation Subprogram</parent>
</inheritance>
<inheritance>
<name>private package kind</name>
<documentation></documentation>
<child>Singleton Class Package</child>
<parent>Private Class Package</parent>
</inheritance>
<inheritance>
<name>private  package kind</name>
<documentation></documentation>
<child>Identified Class Package</child>
<parent>Private Class Package</parent>
</inheritance>
<inheritance>
<name>ident</name>
<documentation></documentation>
<child>Identifier Record Component</child>
<parent>Instance Record Component</parent>
</inheritance>
<inheritance>
<name>component kind</name>
<documentation></documentation>
<child>Analysis Component</child>
<parent>Instance Record Component</parent>
</inheritance>
<inheritance>
<name>class package kind</name>
<documentation></documentation>
<child>Private Class Package</child>
<parent>Class Package</parent>
</inheritance>
<inheritance>
<name>kind</name>
<documentation></documentation>
<child>Instance Event</child>
<parent>Event</parent>
</inheritance>
<inheritance>
<name>kind</name>
<documentation></documentation>
<child>Class Event</child>
<parent>Event</parent>
</inheritance>
<inheritance>
<name>timing</name>
<documentation></documentation>
<child>Queued Event</child>
<parent>Event</parent>
</inheritance>
<inheritance>
<name>timing</name>
<documentation></documentation>
<child>Held Event</child>
<parent>Event</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Irrevocable Event</child>
<parent>Held Event</parent>
</inheritance>
<inheritance>
<name></name>
<documentation></documentation>
<child>Revokable Event</child>
<parent>Held Event</parent>
</inheritance>
<inheritance>
<name>generatability</name>
<documentation></documentation>
<child>Generatable</child>
<parent>Operation Subprogram</parent>
</inheritance>
<inheritance>
<name>generatability</name>
<documentation></documentation>
<child>Non Generatable</child>
<parent>Operation Subprogram</parent>
</inheritance>
</relationships>
</domain>
