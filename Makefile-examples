#  Copyright (C) Simon Wright <simon@pushface.org>

#  This package is free software; you can redistribute it and/or
#  modify it under terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2, or
#  (at your option) any later version. This package is distributed in
#  the hope that it will be useful, but WITHOUT ANY WARRANTY; without
#  even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#  PARTICULAR PURPOSE. See the GNU General Public License for more
#  details. You should have received a copy of the GNU General Public
#  License distributed with this package; see file COPYING.  If not,
#  write to the Free Software Foundation, 59 Temple Place - Suite
#  330, Boston, MA 02111-1307, USA.

# $Id$

# Makefile for tests, use with Cygwin under Windows or Unix (assumes a
# Unix system if Cygwin not detected).

# It's assumed that no project-special settings are in place and that
# the command 'gnatmake' will compile and generate an executable.

# It's assumed that this is still a subdirectory of the ColdFrame
# install directory, and that we have write access (OK on Windows,
# may require admin cooperation on Unix).

all::
clean::

sys = $(shell uname)
ifneq (, $(findstring CYGWIN, $(sys)))
  system = winnt
  exe = .exe
else
  system = unix
  exe =
endif

cf = $(TOP)/$(COLDFRAME)

parent = $(cf)/Makefile-$(system)

include $(parent)

app = ADA_PROJECT_PATH=$(cf)

all:: build-dirs
clean::
	find $(BUILD_BASE) -type f -name \*.o -o -name \*.ali | xargs rm -f

all:: interrupt_handling-harness$(exe)
interrupt_handling-harness$(exe): Interrupt_Handling.gen force
	$(app) gnatmake -PInterrupt_Handling 2>&1 | \
	  tee -a Interrupt_Handling.log
clean::
	-rm -f interrupt_handling-harness$(exe)

all:: library_test_harness$(exe)
library_test_harness$(exe): Library.gen force
	$(app) gnatmake -PLibrary 2>&1 | tee -a Library.log
clean::
	-rm -f library_test_harness$(exe)

all:: performance_harness$(exe)
performance_harness$(exe): Performance.gen force
	$(app) gnatmake -PPerformance 2>&1 | tee -a Performance.log
clean::
	-rm -f performance_harness$(exe)

all:: problem_reporting_harness$(exe)
problem_reporting_harness$(exe): Problem_Reporting.gen force
	$(app) gnatmake -PProblem_Reporting 2>&1 | tee -a Problem_Reporting.log
clean::
	-rm -f problem_reporting_harness$(exe)

all:: serialization_client$(exe)
serialization_client: serialization_server$(exe)
clean::
	-rm -f serialization_client$(exe)

all:: serialization_server$(exe)
serialization_server: Serialization.gen \
 Serialization_Demo.gen \
 Serialization_Other.gen \
 force
	$(app) gnatmake -PSerialization 2>&1 | tee -a Serialization.log
clean::
	-rm -f serialization_server$(exe)

all:: states-t$(exe)
states-t$(exe): States.gen force
	$(app) gnatmake -PStates 2>&1 | tee -a States.log
clean::
	-rm -f states-t$(exe)

all:: stairwell_demo$(exe)
stairwell_demo$(exe):
clean::
	-rm -f stairwell_demo$(exe)

Digital_IO.gen: Digital_IO.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Digital_IO.log
	@true
Digital_IO.raw: Digital_IO_Interface.raw
clean::
	-rm -rf Digital_IO.{ada,gen,norm,raw}

House_Management.gen: House_Management.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee House_Management.log
	@true
clean::
	-rm -rf House_Management.{ada,gen,norm,raw}

Library.gen: Library.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Library.log
	@true
clean::
	-rm -rf Library.{ada,gen,norm,raw}

Interrupt_Handling.gen: Interrupt_Handling.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Interrupt_Handling.log
	@true
clean::
	-rm -rf Interrupt_Handling.{ada,gen,norm,raw}

Performance.gen: Performance.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Performance.log
	@true
clean::
	-rm -rf Performance.{ada,gen,norm,raw}

Problem_Reporting.gen: Problem_Reporting.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Problem_Reporting.log
	@true
clean::
	-rm -rf Problem_Reporting.{ada,gen,norm,raw}

Serialization.gen: Serialization.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Serialization.log
	@true
clean::
	-rm -rf Serialization.{ada,gen,norm,raw}

Serialization_Demo.gen: Serialization_Demo.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Serialization_Demo.log
	@true
clean::
	-rm -rf Serialization_Demo.{ada,gen,norm,raw}

Serialization_Demo_Other.gen: Serialization_Demo_Other.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee Serialization_Demo_Other.log
	@true
clean::
	-rm -rf Serialization_Demo_Other.{ada,gen,norm,raw}

States.gen: States.norm
	-$(MAKE) -f $(parent) $@ 2>&1 | tee States.log
	@true
clean::
	-rm -rf States.{ada,gen,norm,raw}

$(COLDFRAMEOUT)/%.raw: %.cat
	python $(cf)/cat2raw.py -o$@  $<

.PHONY: force clean

#;; for emacs:
#;; Local Variables:
#;; mode: makefile
#;; End:
