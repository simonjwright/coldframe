#  Copyright (C) Simon Wright <simon@pushface.org>

#  This package is free software; you can redistribute it and/or
#  modify it under terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2, or
#  (at your option) any later version. This package is distributed in
#  the hope that it will be useful, but WITHOUT ANY WARRANTY; without
#  even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#  PARTICULAR PURPOSE. See the GNU General Public License for more
#  details. You should have received a copy of the GNU General Public
#  License distributed with this package; see file COPYING.  If not,
#  write to the Free Software Foundation, 59 Temple Place - Suite
#  330, Boston, MA 02111-1307, USA.

# $Id$

# Makefile for use with Cygwin under Windows.

# Define these variables on the Make command line.

BLANK_LINES = yes
GENERATE_ACCESSORS = defined
GENERATE_STUBS = no
STACK_DUMP = no
VERBOSE = no

# Define these variables in an including Makefile (before the actual
# include) or in the environment

ifeq ($(CASE_EXCEPTIONS), )
  CASE_EXCEPTIONS = ~/.emacs_case_exceptions
endif

ifeq ($(COLDFRAMEOUT), )
  COLDFRAMEOUT = .
endif

ifeq ($(DOMAIN_NAME), )
  NORM_DOMAIN_NAME = 
else
  NORM_DOMAIN_NAME = --domain-name "$(DOMAIN_NAME)"
endif

ifeq ($(TOP), )
  TOP = c:
endif

# Locations, shouldn't need change

CF = $(TOP)/cf-DATE

AWK = awk
ITCLSH = $(TOP)/Tcl/bin/itclsh31
TCLXML = $(TOP)/tclxml-2.1theta

SAXON = $(TOP)/Saxon/saxon

# No user-servicable parts below

# Ensure we have a sensible default target
all::

ifeq ($(STACK_DUMP), yes)
  NORM_STACK_DUMP = --stack-dump
else
  NORM_STACK_DUMP =
endif

ifeq ($(VERBOSE), yes)
  NORM_VERBOSE = --verbose
  CHOP_VERBOSE =
else
  NORM_VERBOSE =
  CHOP_VERBOSE = -q
endif

NORMALIZE_ROSE_SCRIPT = $(CF)/normalize-rose.tcl
HTMLGEN_SCRIPT = $(CF)/generate-html.xsl
Codegen_Script = $(CF)/generate-ada.xsl
ifeq ($(CODEGEN_SCRIPT), )
  CODEGEN_SCRIPT = $(Codegen_Script)
endif
CSV_SCRIPT = $(CF)/serialized-to-csv.tcl

%.norm: $(COLDFRAMEOUT)/%.raw
	@echo generating $@ ...
	TCLLIBPATH=$(TCLXML) $(ITCLSH) $(NORMALIZE_ROSE_SCRIPT) \
	    --casing '$(CASE_EXCEPTIONS)' \
	    $(NORM_DOMAIN_NAME) \
	    $(NORM_STACK_DUMP) \
	    $(NORM_VERBOSE) \
	    --version cf-DATE \
	    <$< >$@ || (rm -f $@; exit 1)

%.html: %.norm
	@echo generating $@ ...
	@$(SAXON) $< $(HTMLGEN_SCRIPT) >$@ || (rm -f $@; exit 1)

%.ada: %.norm
	@echo generating $@ ...
	@$(SAXON) $< $(CODEGEN_SCRIPT) \
	  add-blank-lines=$(BLANK_LINES) \
	  coldframe-version=cf-DATE \
	  generate-accessors=$(GENERATE_ACCESSORS) \
	  generate-stubs=$(GENERATE_STUBS) \
	  verbose=$(VERBOSE) \
	  >$@-t \
	  || (echo "Generation problem."; rm -f $@ $@-t; exit 1)
	@sed -e "s/LINES-OF-CODE/`tr -cd ';' <$@-t | wc -c | tr -d ' '`/" \
	  <$@-t >$@
	@rm -f $@-t

# Delete the target directory & all contents
# create the target directory
# gnatchop the .ada file
# remove any generated files which are also present in the implementation
# directory (.impl)
# write-protect the generated files (careful, in case there are a lot of them!)
# make the target directory itself writable (so users can delete files in it)
# report unimplemented bodies
%.gen: %.ada
	@echo generating $@ ...
	@-rm -rf $@
	@-mkdir $@
	@gnatchop $(CHOP_VERBOSE) $< $@
	@-[ -d $*.impl ] && \
	for f in `(cd $*.impl; find . -maxdepth 1 -name \*.ad[bs])`; do \
	  if [ -f $@/$$f ]; then \
	    echo "    removing $@/$$f"; rm $@/$$f; \
	  else \
	    echo "  extra source file $$f in .impl"; \
	  fi \
	done
	@chmod -R a-w $@
	@chmod u+w $@
	@echo "checking for unimplemented bodies ..."
	@grep -rl 'edit this' $@ || echo "... none."

# Split serialized XML files into CSV format, one per serialized type found.
%.csv: %.xml
	TCLLIBPATH=$(TCLXML) $(ITCLSH) $(CSV_SCRIPT) <$<

# Installs ColdFrame's project source files in your directory.
# Suppose your overriding source is in C:\Base\Build\ColdFrameProject\project,
# change directory to C:\Base\Build\ColdFrameProject and say
#   $ make -f $TOP/$COLDFRAME/Makefile-winnt install
# This will place those of ColdFrame's files that you haven't overridden in
# C:\Base\Build\ColdFrameProject\inherited
install::
	rm -rf inherited
	mkdir inherited
	for f in $(CF)/project/*.ad[bs]; do \
	  [ -f project/`basename $$f` ] || cp -p $$f inherited/; \
	done

# Creates your build directory (Ada Library) tree, under $BUILD_BASE
build-dirs::
	@[ -n "$(BUILD_BASE)" ] || (echo "BUILD_BASE must be set" && exit 1)
	@for d in aunit bc coldframe fixes main; do \
	  [ -d $(BUILD_BASE)/$$d ] || \
	    (echo mkdir -p $(BUILD_BASE)/$$d; mkdir -p $(BUILD_BASE)/$$d);\
	done

#;; for emacs:
#;; Local Variables:
#;; mode: makefile
#;; End:
