# Copyright (c) 2001-2002 Simon Wright <simon@pushface.org>
# $Id$

# Makefile for use with Cygwin under Windows.

# Define these variables on the Make command line.

BLANK_LINES = yes
GENERATE_ACCESSORS = defined
STACK_DUMP = no
VERBOSE = no

# Define these variables in an including Makefile (before the actual
# include) or in the environment

ifeq ($(CASE_EXCEPTIONS), )
  CASE_EXCEPTIONS = ~/.emacs_case_exceptions
endif

ifeq ($(COLDFRAMEOUT), )
  COLDFRAMEOUT = .
endif

ifeq ($(TOP), )
  TOP = c:
endif

# Locations, shouldn't need change

CF = $(TOP)/cf-DATE

AWK = awk
ITCLSH = $(TOP)/Tcl/bin/itclsh31
TCLXML = $(TOP)/tclxml-2.1theta

SAXON = $(TOP)/Saxon/saxon

# No user-servicable parts below

ifeq ($(STACK_DUMP), yes)
  NORM_STACK_DUMP = --stack-dump
else
  NORM_STACK_DUMP =
endif

ifeq ($(VERBOSE), yes)
  NORM_VERBOSE = --verbose
  CHOP_VERBOSE =
else
  NORM_VERBOSE =
  CHOP_VERBOSE = -q
endif

ESCAPE_MARKUP_SCRIPT = $(CF)/escape-markup.awk
NORMALIZE_ROSE_SCRIPT = $(CF)/normalize-rose.tcl
HTMLGEN_SCRIPT = $(CF)/generate-html.xsl
CODEGEN_SCRIPT = $(CF)/generate-ada.xsl

%.norm: $(COLDFRAMEOUT)/%.raw
	$(AWK) -f $(ESCAPE_MARKUP_SCRIPT) <$< | \
	TCLLIBPATH=$(TCLXML) $(ITCLSH) $(NORMALIZE_ROSE_SCRIPT) \
	  --casing $(CASE_EXCEPTIONS) \
	  $(NORM_STACK_DUMP) \
	  $(NORM_VERBOSE) \
	  --version cf-DATE \
	  >$@ || (rm -f $@; exit 1)

%.html: %.norm
	$(SAXON) $< $(HTMLGEN_SCRIPT) >$@ || (rm -f $@; exit 1)

%.ada: %.norm
	$(SAXON) $< $(CODEGEN_SCRIPT) \
	  add-blank-lines=$(BLANK_LINES) \
	  coldframe-version=cf-DATE \
	  generate-accessors=$(GENERATE_ACCESSORS) \
	  verbose=$(VERBOSE) \
	  >$@-t \
	  || (echo "Generation problem."; rm -f $@ $@-t; exit 1)
	sed -e "s/LINES-OF-CODE/`tr -cd ';' <$@-t | wc -c | tr -d ' '`/" \
	  <$@-t >$@
	rm -f $@-t

# Delete the target directory & all contents
# create the target directory
# gnatchop the .ada file
# remove any generated files which are also present in the implementation
# directory (.impl)
# write-protect the generated files (careful, in case there are a lot of them!)
# report unimplemented bodies
%.gen: %.ada
	-rm -rf $@
	-mkdir $@
	gnatchop $(CHOP_VERBOSE) $< $@
	[ ! -d $*.impl ] || for f in `(cd $*.impl; ls *.ad?)`; do \
	   [ ! -f $@/$$f ] || ( echo rm $@/$$f; rm $@/$$f); \
	done
	chmod -R a-w $@
	chmod u+w $@
	@echo "checking for unimplemented bodies .."
	@grep -rl Program_Error $@ || echo ".. none."

.PHONY: force

#;; for emacs:
#;; Local Variables:
#;; mode: makefile
#;; End:
