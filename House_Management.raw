<domain>
<extractor>cf-20030104a</extractor>
<name>House Management</name>
<date>
<year>2003</year>
<month>1</month>
<day>7</day>
<time>17:28</time>
</date>
<documentation>This domain represents an electronic houlsehold control system.
The first release only manages the stairwell lighting system.

[[ revision : $Id: House_Management.raw,v 4158b05247ca 2003/01/07 20:06:32 simon $ ]]</documentation>
<classes>
<class>
<name>Lamp</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>There is a lamp beween each pair of landings.
When the lamp is activated, it comes on for a preset period.
If it is activated again while it is still on, the activation period is extended by the preset period.</documentation>
<attributes>
<attribute stereotype="id">
<name>name</name>
<documentation>Each Lamp is uniquely identified by its name. The name corresponds to the geographical location of the lamp.</documentation>
<type>Lamp Name</type>
<initial></initial>
</attribute>
<attribute>
<name>timeout</name>
<documentation>This ColdFrame Timer is used to turn off the Lamp at the end of its activation period.</documentation>
<type>Timer</type>
<initial></initial>
</attribute>
</attributes>
<operations>
<operation stereotype="init">
<name>initialize</name>
<documentation>This operation initializes the Lamps and Buttons, and connects to the Digital IO domaion.</documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>button_pushed</name>
<documentation>This operation is called when an associated button has been pushed. It posts the necessary events to the instance's state machine.</documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>turn off</name>
<documentation>This state entry action turns off the associated signal via Digital IO.</documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>turn on</name>
<documentation>This state entry action turns on the associated signal via Digital IO.</documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>set timeout</name>
<documentation>This state entry action sets the instance Timeout to the required activation period.</documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>clear timeout</name>
<documentation>This state entry action unsets the instance Timeout.</documentation>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
<statemachine>
<states>
<state initial="yes">
<name>initial</name>
<entryactions>
</entryactions>
<documentation></documentation>
</state>
<state>
<name>idle</name>
<entryactions>
<action>
<name>turn off</name>
</action>
</entryactions>
<documentation>In this state, the Lamp is off.
It's assumed that it's acceptable to turn the Lamp off even if it is off already.</documentation>
</state>
<state>
<name>lit</name>
<entryactions>
<action>
<name>turn on</name>
</action>
<action>
<name>set timeout</name>
</action>
</entryactions>
<documentation>In this state, the Lamp is lit and the Timer is set.</documentation>
</state>
<state>
<name>restarted</name>
<entryactions>
<action>
<name>clear timeout</name>
</action>
</entryactions>
<documentation>This is an ephemeral state, which clears the instance Timeout and drops through to the Lit state, which will turn the Lamp on and reset the Timeout.
It's assumed that  it's acceptable to turn the Lamp on even if it is on already.</documentation>
</state>
</states>
<transitions>
<transition>
<source>initial</source>
<target>idle</target>
<event>
<name></name>
</event>
<documentation></documentation>
</transition>
<transition>
<source>idle</source>
<target>lit</target>
<event>
<name>button push</name>
</event>
<documentation></documentation>
</transition>
<transition>
<source>lit</source>
<target>restarted</target>
<event>
<name>button push</name>
</event>
<documentation></documentation>
</transition>
<transition>
<source>lit</source>
<target>idle</target>
<event>
<name>timeout</name>
</event>
<documentation></documentation>
</transition>
<transition>
<source>restarted</source>
<target>lit</target>
<event>
<name></name>
</event>
<documentation></documentation>
</transition>
</transitions>
</statemachine>
</class>
<class>
<name>Button</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>There is a pushbutton on each landing. Each pushbutton controls a number of Lamps; when the button is pushed, the lamps are activated.</documentation>
<attributes>
<attribute stereotype="id">
<name>name</name>
<documentation>Each Button is uniquely identified by its name. The name corresponds to the geographical location of the button.</documentation>
<type>Button Name</type>
<initial></initial>
</attribute>
</attributes>
<operations>
<operation stereotype="class">
<name>changed</name>
<documentation>Acts as receiver of state changes from Digital IO, via Signal State Callback.</documentation>
<parameters>
<parameter>
<name>s</name>
<documentation></documentation>
<type>Signal State</type>
<initial></initial>
</parameter>
</parameters>
</operation>
<operation>
<name>pushed</name>
<documentation>The button has been pushed; tell the associated Lamps.</documentation>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
</class>
<class>
<name>Button to Lamp</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>This association class is required by ColdFrame to support the many-to-many association A1 but has no functionality in the present understanding of the problem domain.
A possible future enhancement such as having the "on" time of the lamp depend on which button was used to switch it on might lead to a role for this class.</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Lamp Name</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>There is a lamp beween each pair of landings. This type names the lamps.

[[  enumeration :
basement,
ground floor,
first floor,
second floor
]]</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Button Name</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>There is a pushbutton on each landing. This type names the pushbuttons.

[[ enumeration:
basement,
ground floor,
first floor,
second floor
]]</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Signal State</name>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation>This type is used by the supporting Digital IO domain to report switch state changes.

[[ imported : Digital IO ]]</documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
</classes>
<relationships>
<association>
<name>a1</name>
<documentation>This association represents the assignment of Button to Lamp; when a Button is pushed, all the Lamps that it "controls" are activated (by calling the Button_Pushed operation).</documentation>
<role><end>1</end>
<name>controls</name>
<classname>Lamp</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<role><end>2</end>
<name>is controlled by</name>
<classname>Button</classname>
<cardinality>1..n</cardinality>
<documentation></documentation>
</role>
<associative>Button to Lamp</associative>
</association>
</relationships>
</domain>
