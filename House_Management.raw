<domain>
<extractor>cf-DATE</extractor>
<name>House Management</name>
<date>
<year>2004</year>
<month>12</month>
<day>24</day>
<time>08:51</time>
</date>
<documentation><![CDATA[ Copyright (C) Simon Wright <simon@pushface.org>

This package is free software; you can redistribute it and/or modify it under terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version. This package is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License distributed with this package; see file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

This domain represents an electronic household control system.
The first release only manages the stairwell lighting system.

{ revision = $Revision: e582817104ee $ } ]]></documentation>
<classes>
<class>
<name>Lamp</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ There is a lamp beween each pair of landings.
When the lamp is activated, it comes on for a preset period.
If it is activated again while it is still on, the activation period is extended by the preset period. ]]></documentation>
<attributes>
<attribute stereotype="id">
<name>name</name>
<visibility>PrivateAccess</visibility>
<documentation><![CDATA[ Each Lamp is uniquely identified by its name. The name corresponds to the geographical location of the lamp. ]]></documentation>
<type>Lamp Name</type>
<initial></initial>
</attribute>
<attribute>
<name>timeout</name>
<visibility>PrivateAccess</visibility>
<documentation><![CDATA[ This ColdFrame Timer is used to turn off the Lamp at the end of its activation period. ]]></documentation>
<type>Timer</type>
<initial></initial>
</attribute>
</attributes>
<operations>
<operation stereotype="init">
<name>initialize</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ This operation initializes the Lamps and Buttons, and connects to the Digital IO domaion. ]]></documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>turn off</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ This state entry action turns off the associated signal via Digital IO. ]]></documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>turn on</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ This state entry action turns on the associated signal via Digital IO. ]]></documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>set timeout</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ This state entry action sets the instance Timeout to the required activation period. ]]></documentation>
<parameters>
</parameters>
</operation>
<operation>
<name>clear timeout</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ This state entry action unsets the instance Timeout. ]]></documentation>
<parameters>
</parameters>
</operation>
</operations>
<events>
</events>
<statemachine>
<states>
<state initial="yes">
<name>initial</name>
<entryactions>
</entryactions>
<documentation><![CDATA[  ]]></documentation>
</state>
<state>
<name>idle</name>
<entryactions>
<entryaction><name>turn off</name></entryaction>
</entryactions>
<documentation><![CDATA[ In this state, the Lamp is off.
It's assumed that it's acceptable to turn the Lamp off even if it is off already. ]]></documentation>
</state>
<state>
<name>lit</name>
<entryactions>
<entryaction><name>turn on</name></entryaction>
<entryaction><name>set timeout</name></entryaction>
</entryactions>
<documentation><![CDATA[ In this state, the Lamp is lit and the Timer is set. ]]></documentation>
</state>
</states>
<transitions>
<transition>
<source>initial</source>
<target>idle</target>
<event><name></name></event>
<transitionaction><name></name></transitionaction>
<documentation><![CDATA[  ]]></documentation>
</transition>
<transition>
<source>idle</source>
<target>lit</target>
<event><name>button push</name></event>
<transitionaction><name></name></transitionaction>
<documentation><![CDATA[  ]]></documentation>
</transition>
<transition>
<source>lit</source>
<target>idle</target>
<event><name>timeout</name></event>
<transitionaction><name></name></transitionaction>
<documentation><![CDATA[  ]]></documentation>
</transition>
<transition>
<source>lit</source>
<target>lit</target>
<event><name>button push</name></event>
<transitionaction><name>clear timeout</name></transitionaction>
<documentation><![CDATA[  ]]></documentation>
</transition>
</transitions>
</statemachine>
</class>
<class>
<name>Button</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ There is a pushbutton on each landing. Each pushbutton controls a number of Lamps; when the button is pushed, the lamps are activated. ]]></documentation>
<attributes>
<attribute stereotype="id">
<name>name</name>
<visibility>PrivateAccess</visibility>
<documentation><![CDATA[ Each Button is uniquely identified by its name. The name corresponds to the geographical location of the button. ]]></documentation>
<type>Button Name</type>
<initial></initial>
</attribute>
</attributes>
<operations>
<operation stereotype="class">
<name>changed</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ Acts as receiver of state changes from Digital IO, via Signal State Callback. Posts a (class) Button Event (only if the button has been pushed). ]]></documentation>
<parameters>
<parameter>
<parametername>s</parametername>
<documentation><![CDATA[  ]]></documentation>
<type>Signal State</type>
<initial></initial>
</parameter>
</parameters>
</operation>
<operation stereotype="handler">
<name>pushed</name>
<visibility>PublicAccess</visibility>
<documentation><![CDATA[ Handles Button Events, which occur when a button has been pushed.
Tell the associated Lamps. ]]></documentation>
<parameters>
<parameter>
<parametername>e</parametername>
<documentation><![CDATA[  ]]></documentation>
<type>Button Event</type>
<initial></initial>
</parameter>
</parameters>
</operation>
</operations>
<events>
<event stereotype="class event">
<name>Button Event</name>
<type>Button Name</type>
</event>
</events>
</class>
<class>
<name>Button to Lamp</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ This association class is required by ColdFrame to support the many-to-many association A1 but has no functionality in the present understanding of the problem domain.
A possible future enhancement such as having the "on" time of the lamp depend on which button was used to switch it on might lead to a role for this class. ]]></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Lamp Name</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ There is a lamp beween each pair of landings. This type names the lamps.

{ enumeration =
basement |
ground floor |
first floor |
second floor
} ]]></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Button Name</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ There is a pushbutton on each landing. This type names the pushbuttons.

{ enumeration =
basement |
ground floor |
first floor |
second floor
} ]]></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
<class stereotype="type">
<name>Signal State</name>
<visibility>PublicAccess</visibility>
<kind>NormalClass</kind>
<cardinality>n</cardinality>
<concurrency>Sequential</concurrency>
<documentation><![CDATA[ This type is used by the supporting Digital IO domain to report switch state changes.

{ imported = Digital IO } ]]></documentation>
<attributes>
</attributes>
<operations>
</operations>
<events>
</events>
</class>
</classes>
<relationships>
<association>
<name>a1</name>
<documentation><![CDATA[ This association represents the assignment of Button to Lamp; when a Button is pushed, all the Lamps that it "controls" are activated (by calling the Button_Pushed operation). ]]></documentation>
<role><end>1</end>
<name>controls</name>
<classname>Lamp</classname>
<cardinality>1..n</cardinality>
<documentation><![CDATA[  ]]></documentation>
</role>
<role><end>2</end>
<name>is controlled by</name>
<classname>Button</classname>
<cardinality>1..n</cardinality>
<documentation><![CDATA[  ]]></documentation>
</role>
<associative>Button to Lamp</associative>
</association>
</relationships>
</domain>
