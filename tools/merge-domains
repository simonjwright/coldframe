#!/usr/bin/python

#  Copyright (C) Simon Wright <simon@pushface.org>

#  This package is free software; you can redistribute it and/or
#  modify it under terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2, or
#  (at your option) any later version. This package is distributed in
#  the hope that it will be useful, but WITHOUT ANY WARRANTY; without
#  even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#  PARTICULAR PURPOSE. See the GNU General Public License for more
#  details. You should have received a copy of the GNU General Public
#  License distributed with this package; see file COPYING.  If not,
#  write to the Free Software Foundation, 59 Temple Place - Suite
#  330, Boston, MA 02111-1307, USA.

# $Id$

# This script merges one or more of ColdFrame's normalized domain
# files.

# One possible use would be to allow test classes to be managed under
# a separate domain and included when necessary.

# Another would be to allow common data types to be imported (this
# would probably only make sense for, for example, Metres).

# There's no attempt to check for multiple declarations.

import getopt
import sys
import xml.dom.minidom

def usage():
    sys.stderr.write(sys.argv[0] + 
                     ': usage: merge file.norm' +
                     ' file.norm [file.norm ...]\n')
    sys.stderr.write('flags:\n')
    sys.stderr.write('-m overwrite the first file with the merged result\n')
    
def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'm')
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    if len(args) < 1:
        usage()
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit(1)
    try:
        main = xml.dom.minidom.parse(args[0])
    except IOError:
        sys.stderr.write("couldn't open " + args[0] + '\n')
        sys.exit(1)
    top = main.firstChild
    for f in args[1:]:
        try:
            add = xml.dom.minidom.parse(f)
        except IOError:
            sys.stderr.write("couldn't open " + f + '\n')
            sys.exit(1)
        for n in add.firstChild.childNodes:
            if n.nodeName in ('class',
                              'type',
                              'exception',
                              'association',
                              'inheritance'):
                top.appendChild(n.cloneNode(1))
        add.unlink()
    outfile = sys.stdout
    for opt, arg in opts:
        if opt == '-m':
            try:
                outfile = open(args[0], 'w')
            except IOError:
                sys.stderr.write("couldn't re-open " + args[0] + '\n')
                sys.exit(1)
    main.writexml(outfile)
    main.unlink()
    outfile.close()
    
if __name__ == "__main__":
    main()

## for emacs:
## Local Variables:
## mode: python
## End:
