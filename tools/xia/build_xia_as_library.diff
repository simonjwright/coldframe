diff -r 21fb1a7fc020 -r 5477bb2b475a .hgtags
--- a/.hgtags	Tue Jan 24 11:55:36 2012 +0000
+++ b/.hgtags	Tue Jan 24 13:11:36 2012 +0000
@@ -137,3 +137,4 @@
 d1e1ac472cd12895ff6ae5109ceecc9ac33c722c Rev_20030126b
 78dede6c2e8674347b4e2bdd3f5841535a50b161 Release_20110720
 127c231499eb0f504a9ec2458dbda943d9642481 Release_20111113
+21fb1a7fc0206b6e8ffa00d939a0e012fce8a3cd Import_XIA-1.0.0
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/README-coldframe
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/tools/xia/README-coldframe	Tue Jan 24 13:11:36 2012 +0000
@@ -0,0 +1,16 @@
+This directory contains XIA-1.0.0 from McKae Technologies
+(http://www.mckae.com), patched for use with ColdFrame.
+
+The patches are contained in build_xia_as_library.diff in this
+directory, and make the following changes:
+
+* XIA.gpr is included, to build XIA as a library. It assumes that the
+  Booch Components and XML/Ada are available on ADA_PROJECT_PATH.
+
+* Some source files are modified to prevent style warnings in user
+  code (the changes are to ensure consistency of casing, eg McKae
+  throughout instead of Mckae in some places. Internal warnings
+  haven't been suppressed, and will appear during initial builds.)
+
+* bench_xpath.adb and test_xpath.adb have been moved to the test/
+  subdirectory, which includes test.gpr.
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/XIA.gpr
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/tools/xia/XIA.gpr	Tue Jan 24 13:11:36 2012 +0000
@@ -0,0 +1,42 @@
+with "bc";
+with "xmlada";
+
+project XIA is
+
+   type Library_T is ("static", "relocatable");
+   Library_Type : Library_T := external ("LIBRARY_TYPE", "static");
+
+   for Library_Name use "xia";
+   for Library_Kind use Library_Type;
+   for Library_Dir use "./lib-" & Library_Type;
+   for Library_Options use External_As_List ("LDFLAGS", " ");
+
+   for Languages use ("ada");
+
+   for Source_Dirs use (".");
+   for Object_Dir use ".build-" & Library_Type;
+
+  package IDE is
+     for Compiler_Command ("ada") use "gnatmake";
+     for Gnatlist use "gnatls";
+  end IDE;
+
+  package Builder is
+     for Default_Switches ("ada") use
+       (
+        "-g",
+        "-j2"
+       );
+  end Builder;
+
+  package Compiler is
+     for Default_Switches ("ada") use
+       (
+        "-gnatqQfo",
+        "-gnatwaL",
+        "-gnat95",
+        "-O2"
+       );
+  end Compiler;
+
+end XIA;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/bench_xpath.adb
--- a/tools/xia/bench_xpath.adb	Tue Jan 24 11:55:36 2012 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,234 +0,0 @@
-------------------------------------------------------------------------
---                                                                    --
---                     McKae Software Utilities                       --
---                                                                    --
---           Copyright (C) 2004 McKae Technologies                    --
---                                                                    --
--- The  McKae   software  utilities   are  free  software;   you  can --
--- redistribute it  and/or modify it  under terms of the  GNU General --
--- Public  License  as published  by  the  Free Software  Foundation; --
--- either version  2, or (at  your option) any later  version.  McKae --
--- Software Utilities are  distributed in the hope that  they will be --
--- useful,  but  WITHOUT  ANY  WARRANTY;  without  even  the  implied --
--- warranty of  MERCHANTABILITY or FITNESS FOR  A PARTICULAR PURPOSE. --
--- See the GNU  General Public License for more  details.  You should --
--- have received a copy of the GNU General Public License distributed --
--- with DTraq; see file COPYING.   If not, write to the Free Software --
--- Foundation, 59  Temple Place -  Suite 330, Boston,  MA 02111-1307, --
--- USA.                                                               --
---                                                                    --
--- As a  special exception, if other files  instantiate generics from --
--- this unit,  or you link this  unit with other files  to produce an --
--- executable,  this unit  does  not by  itself  cause the  resulting --
--- executable to be covered by  the GNU General Public License.  This --
--- exception does  not however invalidate  any other reasons  why the --
--- executable file might be covered by the GNU Public License.        --
---                                                                    --
--- The McKae Software Utilities  are maintained by McKae Technologies --
--- (http://www.mckae.com).                                            --
-------------------------------------------------------------------------
-
-with Ada.Strings.Fixed;
-with Ada.Strings.Maps;
-with Ada.Calendar;
-use Ada.Calendar;
-
-with Dom.Core.Nodes;
-with Mckae.XML.XPath.XIA;
-with Dom.Readers;
-with Unicode.CES;
-
---  with Dtraq.Client_Transport;
---  use  Dtraq.Client_Transport;
-
-with Mckae.Xml.Xpath.Locations;
-
-with Input_Sources.File;
-
-with Text_IO; use Text_IO;
-
-procedure Bench_Xpath is
-
-   use Dom;
-   use Dom.Core;
-   use Input_Sources;
-   use Mckae.Xml.XPath.Locations;
-   use Mckae.Xml.XPath.XIA;
-   use Ada.Strings.Fixed;
-   use Ada.Strings.Maps;
-
-
-   XML_Source_Reader : Dom.Readers.Tree_Reader;
-   Queried_Nodes : Node_List;
-   N             : Node;
-
-   File_Source : File.File_Input;
-   
-   Start, Stop : Ada.Calendar.Time;
-
-begin
-   File.Open("personal.xml", File_Source);
-
-   Readers.Parse(XML_Source_Reader, File_Source);
-   File.Close(File_Source);
-   
-   N := Readers.Get_Tree(XML_Source_Reader);
-   for I in 1 .. 10 loop
-      Start := Clock;
-      Queried_Nodes := Xpath_Query(N, "//given/..");
-      Queried_Nodes := Xpath_Query(N, "//email");
-      Queried_Nodes := Xpath_Query(N, "//@id");
-      Queried_Nodes := Xpath_Query(N, "//@aid");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person/link/attribute::subordinates");
-      Queried_Nodes := Xpath_Query(N, "personnel/person/name/family");
-      Queried_Nodes := Xpath_Query(N, "//family/ancestor::name");
-      Queried_Nodes := Xpath_Query(N, "//family/text()");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person/name/family/..");
-      Queried_Nodes := Xpath_Query(N, "./pesonnel");
-      Queried_Nodes := Xpath_Query(N, "./personnel");
-      Queried_Nodes := Xpath_Query(N, "personnel/person/email/preceding::name/given/text()");
-      Queried_Nodes := Xpath_Query(N, ".//*");
-      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::link/@manager");
-      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::link/@subordinates");
-      Queried_Nodes := Xpath_Query(N, "//@id/parent::*");
-      Queried_Nodes := Xpath_Query(N, "//given/..");
-      Queried_Nodes := Xpath_Query(N, "//email/preceding-sibling::*");
-      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::*");
-      Queried_Nodes := Xpath_Query(N, "//family/ancestor::person/link");
-      Queried_Nodes := Xpath_Query(N, "//name/ancestor::*");
-      Queried_Nodes := Xpath_Query(N, "//name/ancestor-or-self::*");
-      Queried_Nodes := Xpath_Query(N, "//name/descendant::*");
-      Queried_Nodes := Xpath_Query(N, "//name/descendant-or-self::*");
-      Queried_Nodes := Xpath_Query(N, "//@subordinates");
-      Queried_Nodes := Xpath_Query(N, "//@subordinates/..");
-      Queried_Nodes := Xpath_Query(N, "//@subordinates/../preceding::*");
-      Queried_Nodes := Xpath_Query(N, "//@subordinates/../following::*");
-      Queried_Nodes := Xpath_Query(N, "..");
-      Queried_Nodes := Xpath_Query(N, ".");
-      Queried_Nodes := Xpath_Query(N, "..//email");
-      Queried_Nodes := Xpath_Query(N, "//person[3]/following-sibling::*");
-      Queried_Nodes := Xpath_Query(N, "//person[3]/following-sibling::*/@id[2]");
-      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*[2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*/@id[2]");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[2]/email/preceding-sibling::name/given/ancestor-or-self::*[3]");
-      Queried_Nodes := Xpath_Query(N, "//family");
-      Queried_Nodes := Xpath_Query(N, "//given");
-      Queried_Nodes := Xpath_Query(N, "//family|//given");
-      Queried_Nodes := Xpath_Query(N, "//family|//given[2]");
-      Queried_Nodes := Xpath_Query(N, "//person[last()]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position()=2]/@id");
---      Queried_Nodes := Xpath_Query(N, "//person[position(3)=2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//@id[3]");
-      Queried_Nodes := Xpath_Query(N, "//@id[true()]");
-      Queried_Nodes := Xpath_Query(N, "//@id[false()]");
-      Queried_Nodes := Xpath_Query(N, "//@id[not(position()=2)]");
-      Queried_Nodes := Xpath_Query(N, "//@id[position() >= 5]");
-      Queried_Nodes := Xpath_Query(N, "//person[3 - 1]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[3 * 2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[5 mod 2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[5 mod -2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[(-5 mod 2) + 4]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[(-5 mod -2) + 2 * true()]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[round(1.1*3)]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[1 or 2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[4 and -2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[4 and (3 > 10)]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() != 3]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[3 * 1.1]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[5 - 0.0001]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[(((position() mod 2)))]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() mod 2 = 0]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() = floor(last() div 2 + 0.5) or position() = ceiling(last() div 2 + 0.5)]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() > 3]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() < 3]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() <= 2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[position() div 2 + 2]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[5 + -true()]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[number(""This is not a number"")]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[4 div 0]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number(""This is not a number"")) = ""NaN""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number(""This is not a number"")) = ""This is not a number""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(4 div 0) = ""Infinity""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[concat(string(position()), ""23"") = ""323""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[starts-with(concat(string(position()), ""23""), ""22"")]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[contains(concat(string(position()), ""23"", string(position()), ""47""), ""34"")]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring-before(concat(string(position()), ""23"", string(position()), ""47""), ""35"") = ""52""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring-after(concat(string(position()), ""23"", string(position()), ""47""), ""35"") = ""47""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 4, 3) = ""347""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 4) = ""347""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), -42, 1 div 0) = ""223247""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0 div 0, 3) = ""3""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0 div 0, 3) = """"]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 1.5, 2.6) = '234']/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0, 3) = '52']/@id");
---      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), -1 div 0, 1 div 0) = ""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[(string-length(string(position())) * position()) = ""4""]/@id");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(-3)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(35.3)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(0)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(0 div 0)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(-4 div 0)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(10 div 0)]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(string())]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(string(last()))]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(substring-before(""123"", ""5""))]/text()");
-      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(number())]/text()");
-      Queried_Nodes := Xpath_Query(N, "//person[email]/@id");
-      Queried_Nodes := Xpath_Query(N, "//name[given = ""Big""]/family");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[string-length(string(name/family)) < 5]/@id");
-      Queried_Nodes := Xpath_Query(N, "//*[attribute::id=""five.worker""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//*[../email=""chief@foo.com""]");
-      Queried_Nodes := Xpath_Query(N, "//given[.=""Four""]");
-      Queried_Nodes := Xpath_Query(N, "/descendant::node()[count(ancestor::node()) = 3]");
-      Queried_Nodes := Xpath_Query(N, "//name[given=""Five""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name[normalize-space(given)=""Five""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name[translate(normalize-space(string(given)), ""Five"", ""Four"")=""Four""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""Oneabcd"", ""Two"")=""Two""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""FFFF"", ""Four"")=""Four""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""Thre"", ""One"")=""One""]/given");
-      Queried_Nodes := Xpath_Query(N, "//name/given[normalize-space()=""Big""]/text()");
-      Queried_Nodes := Xpath_Query(N, "//name/given[number()=""Big""]/text()");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person/age[count(preceding::age)=2]/../@id");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person/age[(sum(preceding::age) - 21)=56]/../@id");
-      Queried_Nodes := Xpath_Query(N, "//personnel[lang(""en"")]");
-      Queried_Nodes := Xpath_Query(N, "//personnel[lang(""pl"")]");
-      Queried_Nodes := Xpath_Query(N, "//*[lang(""en"")]");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[5]/name/given/ancestor-or-self::*[@xml:lang][2]");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[5]/name/given/ancestor-or-self::*[@xml:lang][last()]");
-      Queried_Nodes := Xpath_Query(N, "//person[2][@id=""three.worker""]/name/given");
-      Queried_Nodes := Xpath_Query(N, "//*[lang(""EN-US"")]");
-      Queried_Nodes := Xpath_Query(N, "//person[number(age)=""37""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number(email))=""NaN""]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number(email))=""5""]/@id");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""four.worker"" and @xml:lang=""en-US""]");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""five.worker"" and @xml:lang=""en-US""]/email");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[number(age) > 40]/@id");
---      Queried_Nodes := Xpath_Query(N, "/personnel/person[(number(age) > 40) | (number(age) < 30)]/@id");
-      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""four.worker""]|/personnel/person/age");
-      Queried_Nodes := Xpath_Query(N, "//@*");
-      Queried_Nodes := Xpath_Query(N, "//person/@*");
-      Queried_Nodes := Xpath_Query(N, "//node()[name(.)=""#text""]");
-      Queried_Nodes := Xpath_Query(N, "//node()[local-name(.)=name(.)]");
-      Queried_Nodes := Xpath_Query(N, "//@*[string(namespace-uri(.))]");
-      Queried_Nodes := Xpath_Query(N, "//@*[namespace-uri(.)]");
-      Queried_Nodes := Xpath_Query(N, "//link[@manager]");
-      Queried_Nodes := Xpath_Query(N, "//link[@subordinates]");
-      Queried_Nodes := Xpath_Query(N, "//link[@manager|@subordinates]");
-      Queried_Nodes := Xpath_Query(N, "//person[number('This is not a number')]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[4 div 0]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number('This is not a number')) = 'NaN']/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(number('This is not a number')) = 'This is not a number']/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[string(4 div 0) = 'Infinity']/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[concat(string(position()), '23') = '323']/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[starts-with(concat(string(position()), '23'), '22')]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[contains(concat(string(position()), '23', string(position()), '47'), '34')]/@id");
-      Queried_Nodes := Xpath_Query(N, "//person[substring-before(concat(string(position()), '23', string(position()), '47'), '35') = '52']/@id");
-      Stop := Clock;
-      Put_Line(Duration'Image(Stop - Start));
-   end loop;
-
--- Disconnect_From_Server;
-
-end Bench_Xpath;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/mckae-xml-xpath-expressions.ads
--- a/tools/xia/mckae-xml-xpath-expressions.ads	Tue Jan 24 11:55:36 2012 +0000
+++ b/tools/xia/mckae-xml-xpath-expressions.ads	Tue Jan 24 13:11:36 2012 +0000
@@ -32,7 +32,7 @@
 use  Ada.Strings.Unbounded;
 with Dom.Core;
 
-package Mckae.XML.XPath.Expressions is
+package McKae.XML.XPath.Expressions is
 
    type String_Ptr is access all String;
 
@@ -152,4 +152,4 @@
                                 Args          : in out Argument_List;
                                 Result        :    out Expression_Values);
 
-end Mckae.XML.XPath.Expressions;
+end McKae.XML.XPath.Expressions;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/mckae-xml-xpath-locations.ads
--- a/tools/xia/mckae-xml-xpath-locations.ads	Tue Jan 24 11:55:36 2012 +0000
+++ b/tools/xia/mckae-xml-xpath-locations.ads	Tue Jan 24 13:11:36 2012 +0000
@@ -29,10 +29,10 @@
 ------------------------------------------------------------------------
 
 with Ada.Strings.Unbounded;
-with Mckae.XML.XPath.Predicates;
+with McKae.XML.XPath.Predicates;
 with Unicode.CES;
 
-package Mckae.XML.XPath.Locations is
+package McKae.XML.XPath.Locations is
 
    use Ada.Strings.Unbounded;
    use McKae.XML.XPath;
@@ -121,7 +121,7 @@
       end record;
 
    -- Redefinition of strings to be compatible with the DOM interface
-   subtype Xpath_String is Unicode.CES.Byte_Sequence;
+   subtype XPath_String is Unicode.CES.Byte_Sequence;
 
 
    -- Add a newly defined location step to the path
@@ -144,4 +144,4 @@
    --  procedure.
    procedure Reset_For_Parsing;
 
-end Mckae.XML.XPath.Locations;
+end McKae.XML.XPath.Locations;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/mckae-xml-xpath-xia.ads
--- a/tools/xia/mckae-xml-xpath-xia.ads	Tue Jan 24 11:55:36 2012 +0000
+++ b/tools/xia/mckae-xml-xpath-xia.ads	Tue Jan 24 13:11:36 2012 +0000
@@ -39,7 +39,7 @@
 
 with Dom.Core;
 
-package Mckae.XML.XPath.XIA is
+package McKae.XML.XPath.XIA is
 
    function XPath_Query
      (N     : Dom.Core.Node;
@@ -62,4 +62,4 @@
    Inappropriate_Node : exception;
    -- Raised when the starting node does not correspond to the type of query
 
-end Mckae.XML.XPath.XIA;
+end McKae.XML.XPath.XIA;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/test/bench_xpath.adb
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/tools/xia/test/bench_xpath.adb	Tue Jan 24 13:11:36 2012 +0000
@@ -0,0 +1,234 @@
+------------------------------------------------------------------------
+--                                                                    --
+--                     McKae Software Utilities                       --
+--                                                                    --
+--           Copyright (C) 2004 McKae Technologies                    --
+--                                                                    --
+-- The  McKae   software  utilities   are  free  software;   you  can --
+-- redistribute it  and/or modify it  under terms of the  GNU General --
+-- Public  License  as published  by  the  Free Software  Foundation; --
+-- either version  2, or (at  your option) any later  version.  McKae --
+-- Software Utilities are  distributed in the hope that  they will be --
+-- useful,  but  WITHOUT  ANY  WARRANTY;  without  even  the  implied --
+-- warranty of  MERCHANTABILITY or FITNESS FOR  A PARTICULAR PURPOSE. --
+-- See the GNU  General Public License for more  details.  You should --
+-- have received a copy of the GNU General Public License distributed --
+-- with DTraq; see file COPYING.   If not, write to the Free Software --
+-- Foundation, 59  Temple Place -  Suite 330, Boston,  MA 02111-1307, --
+-- USA.                                                               --
+--                                                                    --
+-- As a  special exception, if other files  instantiate generics from --
+-- this unit,  or you link this  unit with other files  to produce an --
+-- executable,  this unit  does  not by  itself  cause the  resulting --
+-- executable to be covered by  the GNU General Public License.  This --
+-- exception does  not however invalidate  any other reasons  why the --
+-- executable file might be covered by the GNU Public License.        --
+--                                                                    --
+-- The McKae Software Utilities  are maintained by McKae Technologies --
+-- (http://www.mckae.com).                                            --
+------------------------------------------------------------------------
+
+with Ada.Strings.Fixed;
+with Ada.Strings.Maps;
+with Ada.Calendar;
+use Ada.Calendar;
+
+with Dom.Core.Nodes;
+with Mckae.XML.XPath.XIA;
+with Dom.Readers;
+with Unicode.CES;
+
+--  with Dtraq.Client_Transport;
+--  use  Dtraq.Client_Transport;
+
+with Mckae.Xml.Xpath.Locations;
+
+with Input_Sources.File;
+
+with Text_IO; use Text_IO;
+
+procedure Bench_Xpath is
+
+   use Dom;
+   use Dom.Core;
+   use Input_Sources;
+   use Mckae.Xml.XPath.Locations;
+   use Mckae.Xml.XPath.XIA;
+   use Ada.Strings.Fixed;
+   use Ada.Strings.Maps;
+
+
+   XML_Source_Reader : Dom.Readers.Tree_Reader;
+   Queried_Nodes : Node_List;
+   N             : Node;
+
+   File_Source : File.File_Input;
+   
+   Start, Stop : Ada.Calendar.Time;
+
+begin
+   File.Open("personal.xml", File_Source);
+
+   Readers.Parse(XML_Source_Reader, File_Source);
+   File.Close(File_Source);
+   
+   N := Readers.Get_Tree(XML_Source_Reader);
+   for I in 1 .. 10 loop
+      Start := Clock;
+      Queried_Nodes := Xpath_Query(N, "//given/..");
+      Queried_Nodes := Xpath_Query(N, "//email");
+      Queried_Nodes := Xpath_Query(N, "//@id");
+      Queried_Nodes := Xpath_Query(N, "//@aid");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person/link/attribute::subordinates");
+      Queried_Nodes := Xpath_Query(N, "personnel/person/name/family");
+      Queried_Nodes := Xpath_Query(N, "//family/ancestor::name");
+      Queried_Nodes := Xpath_Query(N, "//family/text()");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person/name/family/..");
+      Queried_Nodes := Xpath_Query(N, "./pesonnel");
+      Queried_Nodes := Xpath_Query(N, "./personnel");
+      Queried_Nodes := Xpath_Query(N, "personnel/person/email/preceding::name/given/text()");
+      Queried_Nodes := Xpath_Query(N, ".//*");
+      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::link/@manager");
+      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::link/@subordinates");
+      Queried_Nodes := Xpath_Query(N, "//@id/parent::*");
+      Queried_Nodes := Xpath_Query(N, "//given/..");
+      Queried_Nodes := Xpath_Query(N, "//email/preceding-sibling::*");
+      Queried_Nodes := Xpath_Query(N, "//email/following-sibling::*");
+      Queried_Nodes := Xpath_Query(N, "//family/ancestor::person/link");
+      Queried_Nodes := Xpath_Query(N, "//name/ancestor::*");
+      Queried_Nodes := Xpath_Query(N, "//name/ancestor-or-self::*");
+      Queried_Nodes := Xpath_Query(N, "//name/descendant::*");
+      Queried_Nodes := Xpath_Query(N, "//name/descendant-or-self::*");
+      Queried_Nodes := Xpath_Query(N, "//@subordinates");
+      Queried_Nodes := Xpath_Query(N, "//@subordinates/..");
+      Queried_Nodes := Xpath_Query(N, "//@subordinates/../preceding::*");
+      Queried_Nodes := Xpath_Query(N, "//@subordinates/../following::*");
+      Queried_Nodes := Xpath_Query(N, "..");
+      Queried_Nodes := Xpath_Query(N, ".");
+      Queried_Nodes := Xpath_Query(N, "..//email");
+      Queried_Nodes := Xpath_Query(N, "//person[3]/following-sibling::*");
+      Queried_Nodes := Xpath_Query(N, "//person[3]/following-sibling::*/@id[2]");
+      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*[2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[3]/preceding-sibling::*/@id[2]");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[2]/email/preceding-sibling::name/given/ancestor-or-self::*[3]");
+      Queried_Nodes := Xpath_Query(N, "//family");
+      Queried_Nodes := Xpath_Query(N, "//given");
+      Queried_Nodes := Xpath_Query(N, "//family|//given");
+      Queried_Nodes := Xpath_Query(N, "//family|//given[2]");
+      Queried_Nodes := Xpath_Query(N, "//person[last()]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position()=2]/@id");
+--      Queried_Nodes := Xpath_Query(N, "//person[position(3)=2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//@id[3]");
+      Queried_Nodes := Xpath_Query(N, "//@id[true()]");
+      Queried_Nodes := Xpath_Query(N, "//@id[false()]");
+      Queried_Nodes := Xpath_Query(N, "//@id[not(position()=2)]");
+      Queried_Nodes := Xpath_Query(N, "//@id[position() >= 5]");
+      Queried_Nodes := Xpath_Query(N, "//person[3 - 1]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[3 * 2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[5 mod 2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[5 mod -2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[(-5 mod 2) + 4]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[(-5 mod -2) + 2 * true()]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[round(1.1*3)]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[1 or 2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[4 and -2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[4 and (3 > 10)]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() != 3]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[3 * 1.1]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[5 - 0.0001]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[(((position() mod 2)))]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() mod 2 = 0]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() = floor(last() div 2 + 0.5) or position() = ceiling(last() div 2 + 0.5)]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() > 3]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() < 3]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() <= 2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[position() div 2 + 2]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[5 + -true()]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[number(""This is not a number"")]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[4 div 0]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number(""This is not a number"")) = ""NaN""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number(""This is not a number"")) = ""This is not a number""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(4 div 0) = ""Infinity""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[concat(string(position()), ""23"") = ""323""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[starts-with(concat(string(position()), ""23""), ""22"")]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[contains(concat(string(position()), ""23"", string(position()), ""47""), ""34"")]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring-before(concat(string(position()), ""23"", string(position()), ""47""), ""35"") = ""52""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring-after(concat(string(position()), ""23"", string(position()), ""47""), ""35"") = ""47""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 4, 3) = ""347""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 4) = ""347""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), -42, 1 div 0) = ""223247""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0 div 0, 3) = ""3""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0 div 0, 3) = """"]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 1.5, 2.6) = '234']/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), 0, 3) = '52']/@id");
+--      Queried_Nodes := Xpath_Query(N, "//person[substring(concat(string(position()), ""23"", string(position()), ""47""), -1 div 0, 1 div 0) = ""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[(string-length(string(position())) * position()) = ""4""]/@id");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(-3)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(35.3)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(0)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(0 div 0)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(-4 div 0)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(10 div 0)]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(string())]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(string(last()))]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(substring-before(""123"", ""5""))]/text()");
+      Queried_Nodes := Xpath_Query(N, "/descendant-or-self::email[boolean(number())]/text()");
+      Queried_Nodes := Xpath_Query(N, "//person[email]/@id");
+      Queried_Nodes := Xpath_Query(N, "//name[given = ""Big""]/family");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[string-length(string(name/family)) < 5]/@id");
+      Queried_Nodes := Xpath_Query(N, "//*[attribute::id=""five.worker""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//*[../email=""chief@foo.com""]");
+      Queried_Nodes := Xpath_Query(N, "//given[.=""Four""]");
+      Queried_Nodes := Xpath_Query(N, "/descendant::node()[count(ancestor::node()) = 3]");
+      Queried_Nodes := Xpath_Query(N, "//name[given=""Five""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name[normalize-space(given)=""Five""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name[translate(normalize-space(string(given)), ""Five"", ""Four"")=""Four""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""Oneabcd"", ""Two"")=""Two""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""FFFF"", ""Four"")=""Four""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name[translate(string(given), ""Thre"", ""One"")=""One""]/given");
+      Queried_Nodes := Xpath_Query(N, "//name/given[normalize-space()=""Big""]/text()");
+      Queried_Nodes := Xpath_Query(N, "//name/given[number()=""Big""]/text()");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person/age[count(preceding::age)=2]/../@id");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person/age[(sum(preceding::age) - 21)=56]/../@id");
+      Queried_Nodes := Xpath_Query(N, "//personnel[lang(""en"")]");
+      Queried_Nodes := Xpath_Query(N, "//personnel[lang(""pl"")]");
+      Queried_Nodes := Xpath_Query(N, "//*[lang(""en"")]");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[5]/name/given/ancestor-or-self::*[@xml:lang][2]");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[5]/name/given/ancestor-or-self::*[@xml:lang][last()]");
+      Queried_Nodes := Xpath_Query(N, "//person[2][@id=""three.worker""]/name/given");
+      Queried_Nodes := Xpath_Query(N, "//*[lang(""EN-US"")]");
+      Queried_Nodes := Xpath_Query(N, "//person[number(age)=""37""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number(email))=""NaN""]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number(email))=""5""]/@id");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""four.worker"" and @xml:lang=""en-US""]");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""five.worker"" and @xml:lang=""en-US""]/email");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[number(age) > 40]/@id");
+--      Queried_Nodes := Xpath_Query(N, "/personnel/person[(number(age) > 40) | (number(age) < 30)]/@id");
+      Queried_Nodes := Xpath_Query(N, "/personnel/person[@id=""four.worker""]|/personnel/person/age");
+      Queried_Nodes := Xpath_Query(N, "//@*");
+      Queried_Nodes := Xpath_Query(N, "//person/@*");
+      Queried_Nodes := Xpath_Query(N, "//node()[name(.)=""#text""]");
+      Queried_Nodes := Xpath_Query(N, "//node()[local-name(.)=name(.)]");
+      Queried_Nodes := Xpath_Query(N, "//@*[string(namespace-uri(.))]");
+      Queried_Nodes := Xpath_Query(N, "//@*[namespace-uri(.)]");
+      Queried_Nodes := Xpath_Query(N, "//link[@manager]");
+      Queried_Nodes := Xpath_Query(N, "//link[@subordinates]");
+      Queried_Nodes := Xpath_Query(N, "//link[@manager|@subordinates]");
+      Queried_Nodes := Xpath_Query(N, "//person[number('This is not a number')]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[4 div 0]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number('This is not a number')) = 'NaN']/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(number('This is not a number')) = 'This is not a number']/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[string(4 div 0) = 'Infinity']/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[concat(string(position()), '23') = '323']/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[starts-with(concat(string(position()), '23'), '22')]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[contains(concat(string(position()), '23', string(position()), '47'), '34')]/@id");
+      Queried_Nodes := Xpath_Query(N, "//person[substring-before(concat(string(position()), '23', string(position()), '47'), '35') = '52']/@id");
+      Stop := Clock;
+      Put_Line(Duration'Image(Stop - Start));
+   end loop;
+
+-- Disconnect_From_Server;
+
+end Bench_Xpath;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/test/test.gpr
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/tools/xia/test/test.gpr	Tue Jan 24 13:11:36 2012 +0000
@@ -0,0 +1,15 @@
+with "../XIA";
+project Test is
+   for Main use ("bench_xpath.adb", "test_xpath.adb");
+   for Exec_Dir use ".";
+   for Object_Dir use ".build";
+   package Builder is
+      for Default_Switches ("Ada") use ("-g");
+   end Builder;
+   package Binder is
+     for Default_Switches ("Ada") use ("-E");
+   end Binder;
+   package Linker is
+      for Default_Switches ("Ada") use ("-Wl,-no_pie");
+   end Linker;
+end Test;
diff -r 21fb1a7fc020 -r 5477bb2b475a tools/xia/test_xpath.adb
--- a/tools/xia/test_xpath.adb	Tue Jan 24 11:55:36 2012 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,166 +0,0 @@
-------------------------------------------------------------------------
---                                                                    --
---                     McKae Software Utilities                       --
---                                                                    --
---           Copyright (C) 2004 McKae Technologies                    --
---                                                                    --
--- The  McKae   software  utilities   are  free  software;   you  can --
--- redistribute it  and/or modify it  under terms of the  GNU General --
--- Public  License  as published  by  the  Free Software  Foundation; --
--- either version  2, or (at  your option) any later  version.  McKae --
--- Software Utilities are  distributed in the hope that  they will be --
--- useful,  but  WITHOUT  ANY  WARRANTY;  without  even  the  implied --
--- warranty of  MERCHANTABILITY or FITNESS FOR  A PARTICULAR PURPOSE. --
--- See the GNU  General Public License for more  details.  You should --
--- have received a copy of the GNU General Public License distributed --
--- with DTraq; see file COPYING.   If not, write to the Free Software --
--- Foundation, 59  Temple Place -  Suite 330, Boston,  MA 02111-1307, --
--- USA.                                                               --
---                                                                    --
--- As a  special exception, if other files  instantiate generics from --
--- this unit,  or you link this  unit with other files  to produce an --
--- executable,  this unit  does  not by  itself  cause the  resulting --
--- executable to be covered by  the GNU General Public License.  This --
--- exception does  not however invalidate  any other reasons  why the --
--- executable file might be covered by the GNU Public License.        --
---                                                                    --
--- The McKae Software Utilities  are maintained by McKae Technologies --
--- (http://www.mckae.com).                                            --
-------------------------------------------------------------------------
-
-with Ada.Strings.Fixed;
-with Ada.Strings.Maps;
-with Dom.Core.Nodes;
-with Mckae.XML.XPath.XIA;
-with Dom.Readers;
-with Unicode.CES;
-
---  with Dtraq.Client_Transport;
---  use  Dtraq.Client_Transport;
-
-with Mckae.Xml.Xpath.Locations;
-
-with Input_Sources.File;
-
-with Text_IO; use Text_IO;
-
-procedure Test_Xpath is
-
-   use Dom;
-   use Dom.Core;
-   use Input_Sources;
-   use Mckae.Xml.XPath.Locations;
-   use Mckae.Xml.XPath.XIA;
-   use Ada.Strings.Fixed;
-   use Ada.Strings.Maps;
-
-
-   XML_Source_Reader : Dom.Readers.Tree_Reader;
-   Queried_Nodes : Node_List;
-   N             : Node;
-   Child         : Node;
-   Children      : Node_List;
-
-   Children_Printed : Boolean := False;
-
-   File_Source : File.File_Input;
-
-   S : String(1..255);
-   L : Natural;
-
-   procedure Print_Text_Node (T      : Text;
-                              Indent : Boolean := False) is
-      White_Space     : constant Xpath_String := ' ' & Ascii.LF & Ascii.CR & ASCII.HT;
-      White_Space_Set : constant Character_Set := To_Set(White_Space);
-
-      S : Unicode.CES.Byte_Sequence := Trim(Nodes.Node_Value(T),
-                                            White_Space_Set,
-                                            White_Space_Set);
-
-   begin
-      if S'Length > 0 then
-         if Indent then
-            Put("  ");
-         end if;
-         Put_Line(S);
-      end if;
-   end Print_Text_Node;
-
-begin
-   Put("Enter XML file name: ");
-   Get_Line(S, L);
-
-   File.Open(S(1..L), File_Source);
-
-   Readers.Parse(XML_Source_Reader, File_Source);
-   File.Close(File_Source);
-
--- Connect_To_Server;
-
-   loop
-      Put("Enter XPath query: ");
-      Get_Line(S, L);
-      if S(1) /= '#' then -- Skip comment
-         exit when L = 0;
-         New_Line(2);
-         Put_Line("Evaluating: " & S(1..L));
-         New_Line;
-         begin
-            Queried_Nodes := Xpath_Query(Readers.Get_Tree(XML_Source_Reader), S(1..L));
-            Put_Line("Number of nodes:" & Natural'Image(Dom.Core.Nodes.Length(Queried_Nodes)));
-
-            for I in 0 .. Nodes.Length(Queried_Nodes) - 1 loop
-               N := Dom.Core.Nodes.Item(Queried_Nodes, I);
-
-               if N.Node_Type = Element_Node then
-                  Put("<");
-                  Put(Nodes.Node_Name(N));
-                  Put(">");
-
-                  Children := Nodes.Child_Nodes(N);
-                  Children_Printed := False;
-                  for J in 0 .. Nodes.Length(Children) - 1 loop
-                     Child := Nodes.Item(Children, J);
-                     if Child.Node_Type = Element_Node then
-                        if not Children_Printed then
-                           New_Line;
-                           Children_Printed := True;
-                        end if;
-                        Put("  <");
-                        Put(Nodes.Node_Name(Child));
-                        Put_Line(">");
-                     elsif Child.Node_Type = Text_Node then
-                        if not Children_Printed then
-                           New_Line;
-                           Children_Printed := True;
-                        end if;
-                        Print_Text_Node(Child, Indent => True);
-                     end if;
-                  end loop;
-
-                  Put("</");
-                  Put(Nodes.Node_Name(N));
-                  Put_Line(">");
-
-               elsif N.Node_Type = Attribute_Node then
-                  Put(Nodes.Node_Name(N) & "=""");
-                  Put(Nodes.Node_Value (N));
-                  Put_Line("""");
-
-               elsif N.Node_Type = Text_Node then
-                  Print_Text_Node(N);
-               else
-                  Put(Nodes.Node_Value(N));
-               end if;
-            end loop;
-
-         exception
-            when Malformed_XPath =>
-               Put_Line("Malformed query");
-         end;
-      end if;
-   end loop;
-
--- Disconnect_From_Server;
-
-end Test_Xpath;
