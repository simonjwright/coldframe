'-------------------------------------------------------------------------------
'ddf.ebs
'$Id: ddf.ebs,v 916ed44d6e81 2003/06/14 14:27:23 simon $
'
'	This script exports data from a Rose model to an XML file for further 
'	processing by ColdFrame's normalize-rose.tcl.
'
' Copyright (C) Simon Wright <simon@pushface.org>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2, or (at your option)
' any later version.
' 
' This program is distributed in the hope that it will be useful, but
' WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' General Public License for more details.
' 
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
' USA.
'
'-------------------------------------------------------------------------------

Sub DumpAttributes (o As Class)
	Dim atts As AttributeCollection
	Set atts = o.Attributes
	Print "    attributes"					
	Print #1, "<attributes>"
	For attid = 1 To atts.Count
		Dim a As Attribute
		Dim s As String
		Set a = atts.GetAt(attid)
		s = a.Stereotype
		If Len(s) > 0 Then
			Print #1, "<attribute " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<attribute>"
		End If
		Print "      " & a.Name	& " : " & a.Type
		Print #1, "<name>" & a.Name & "</name>"
		Print #1, "<visibility>" & a.ExportControl.Name & "</visibility>"
		If a.Static Then
			Print #1, "<static/>"
		End If	
		Print #1, "<documentation>" & a.Documentation & "</documentation>"
		Print #1, "<type>" &  a.Type & "</type>"
		Print #1, "<initial>" & a.InitValue & "</initial>"
		Print #1, "</attribute>"
	Next attid
	Print #1, "</attributes>"
End Sub

Sub DumpParameters(op As Operation)
	Dim pars As ParameterCollection
	Set pars = op.Parameters
	Print #1, "<parameters>"
	For parid = 1 To pars.Count
		Dim p As Parameter
		Set p = pars.GetAt(parid)
		Dim s As String
		s = p.Stereotype
		If Len(s) > 0 Then
			Print #1, "<parameter " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<parameter>"
		End If
		Print #1, "<parametername>" & p.Name & "</parametername>"
		Print #1, "<documentation>" & p.Documentation & "</documentation>"
		Print #1, "<type>" & p.Type & "</type>"
		Print #1, "<initial>" & p.InitValue & "</initial>"
		Print #1, "</parameter>"
	Next parid
	Print #1, "</parameters>"
End Sub

Sub DumpOperations (o As Class)
	Dim ops As OperationCollection
	Set ops = o.Operations
	Print "    operations"
	Print #1, "<operations>"
	For opid = 1 To ops.Count
		Dim op As Operation
		Set op = ops.GetAt(opid)
		Dim s As String
		s = op.Stereotype
		If Len(s) > 0 Then
			Print #1, "<operation " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<operation>"
		End If
		Print #1, "<name>" & op.Name & "</name>"
		Print #1, "<visibility>" & op.ExportControl.Name & "</visibility>"
		Print #1, "<documentation>" & op.Documentation & "</documentation>"
		If Len(op.ReturnType) > 0 Then
 			Print #1, "<return>" &  op.ReturnType & "</return>"
		End If
		DumpParameters (op)
		Print #1, "</operation>"
	Next opid
	Print #1, "</operations>"
End Sub

Function StateName (s As State) As String
	If Len(s.Name) = 0 Then
		If s.StateKind = "Initial" Then
			StateName = "initial"
		Else
			If s.StateKind = "Final" Then
				StateName = "final"
			Else
				StateName = "anonymous!"
			End If
		End If
	Else
		StateName = s.Name
	End If
End Function

Sub DumpAction(a As Action)
	Print #1, "<action>"
	Print #1, "<name>" & a.Name & "</name>"
'	Print #1, "<target>" & a.Target & "</target>"
	Print #1, "</action>"
End Sub

Sub DumpEntryActions(s As State)
	Dim eas As ActionCollection
	Set eas = s.GetEntryActions()
	Print #1, "<entryactions>"
	For e = 1 To eas.Count
		DumpAction(eas.GetAt(e))
	Next e
	Print #1, "</entryactions>"
End Sub

Sub DumpEvent(e As Event)
	'NB we don't do Guard Conditions or Actions.
	Print #1, "<event>"
	Print #1, "<name>" + e.Name + "</name>"
	Print #1, "</event>"
End Sub

Sub DumpStates (c As Class)
	'NB we only do single-level State Machines and Entry Actions.
	Dim sm As StateMachine
	Set sm = c.StateMachine
	If sm Is Not Nothing Then
		If sm.Stereotype = "generate" Then
			Print "  state machine"
	   		Print #1, "<statemachine>"
			If Not (sm.Name = "State/Activity Model") Then
				Print #1, "<name>" & sm.Name & "</name>"
			End If
			Dim ss As StateCollection
			Set ss = sm.GetAllStates()
   			Print #1, "<states>"
			For s = 1 To ss.Count
				Dim st As State
				Set st = ss.GetAt(s)
				If st.StateKind = "Initial" Then
		   			Print #1, "<state initial=" & Chr(34) & "yes" & Chr(34) & ">"
				Else
					If st.StateKind = "Final" Then
						Print #1, "<state final=" & Chr(34) & "yes" & Chr(34) & ">"
					Else
						Print #1, "<state>"
					End If
				End If
				Print #1, "<name>" + StateName(st) + "</name>"
				DumpEntryActions(st)
				Print #1, "<documentation>" & st.Documentation & "</documentation>"
				Print #1, "</state>"			
			Next s
			Print #1, "</states>"
			Dim trs As TransitionCollection
			Set trs = sm.GetAllTransitions()
			Print #1, "<transitions>"
			For t = 1 To trs.Count
				Dim tr As Transition
				Set tr = trs.GetAt(t)
				Dim trst As String
				trst = tr.Stereotype
				If Len(trst) > 0 Then
					Print #1, "<transition stereotype=" & chr(34) & trst & chr(34) & ">"
				Else
					Print #1, "<transition>"
				End If
				Print #1, "<source>" & StateName(tr.GetSourceState()) & "</source>"
				Print #1, "<target>" & StateName(tr.GetTargetState()) & "</target>"
				DumpEvent(tr.GetTriggerEvent())
				Print #1, "<documentation>" & tr.Documentation & "</documentation>"
				Print #1, "</transition>"
			Next t
			Print #1, "</transitions>"
			Print #1, "</statemachine>"
		End If
	End If
End Sub

Sub DumpTypedEvents (o As Class)
	Dim deps As ClassDependencyCollection
	Set deps = o.GetClassDependencies()
	Print #1, "<events>"
	For i = 1 To deps.Count
		Dim d As ClassDependency
		Set d = deps.GetAt(i)
		Dim s As String
		s = LCase(d.Stereotype)
		Dim sup As Class
		Set sup = d.GetSupplierClass
		If Instr (s, "event") <> 0 Then
			Print #1, "<event stereotype=" & chr(34) & s & chr(34) & ">"
			Print #1, "<name>" & d.Name & "</name>"
			Print #1, "<type>" & sup.Name & "</type>"
			Print #1, "</event>"
		End If
	Next I
	Print #1, "</events>"
End Sub

Sub DumpClassParameters(c As Class)
	Dim kind As String
	kind = c.ClassKind
	If Not (kind = "ParameterizedClass" Or kind = "ParameterizedClassUtility") Then
		Exit Sub
	End If
	Dim pars As ParameterCollection
	Set pars = c.Parameters
	Print #1, "<parameters>"
	For parid = 1 To pars.Count
		Dim p As Parameter
		Set p = pars.GetAt(parid)
		Dim s As String
		s = p.Stereotype
		If Len(s) > 0 Then
			Print #1, "<parameter " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<parameter>"
		End If
		Print #1, "<name>" & p.Name & "</name>"
		Print #1, "<documentation>" & p.Documentation & "</documentation>"
		Print #1, "<type>" & p.Type & "</type>"
		Print #1, "<initial>" & p.InitValue & "</initial>"
		Print #1, "</parameter>"
	Next parid
	Print #1, "</parameters>"
End Sub

Sub DumpClass (o As Class)
	Print "  class " & o.Name
	Dim s As String
	s = o.Stereotype
	If Len(s) > 0 Then
	  	Print #1, "<class stereotype=" & Chr(34) & o.Stereotype & Chr(34) & ">"
	Else
		Print #1, "<class>"
	End If	
	Print #1, "<name>" & o.Name & "</name>"
	If o.Abstract then
		Print #1, "<abstract/>"
	End If
	Print #1, "<cardinality>" & o.Cardinality & "</cardinality>"
	Print #1, "<concurrency>" & o.Concurrency & "</concurrency>"
	Print #1, "<documentation>" & o.Documentation & "</documentation>"
	'fiddling with generics
	DumpClassParameters (o)
	DumpAttributes (o)
	DumpOperations (o)
	DumpTypedEvents (o)
	DumpStates (o)
	Print #1, "</class>"
End Sub

Sub DumpClasses (domain As Category)
	Print "classes in " & domain.Name
	Dim classes As ClassCollection
	Set classes = domain.Classes
	For clid = 1 To classes.Count
		DumpClass (classes.GetAt (clid))
	Next clid
	Dim children As CategoryCollection
	Set children = domain.Categories
	For chid = 1 To children.Count
		Dim child As Category
		Set child = children.getAt (chid)
		If child.Stereotype = "generate" Then
			DumpClasses (child)
		End If
	Next chid
End Sub

Sub DumpAssociation (assoc As Association)
	'NB the role name is a verb phrase of which the class is the object
	' -- the class at the other End being the subject.
	Print "    association"
	Print #1, "<association>"
	Print #1, "<name>" & assoc.Name & "</name>"
	Print #1, "<documentation>" & assoc.Documentation & "</documentation>"
	Print #1, "<role><end>1</end>"
	Print #1, "<name>" & assoc.Role1.Name & "</name>"
	Print #1, "<classname>" & assoc.Role1.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role1.Cardinality & "</cardinality>"
	Print #1, "<documentation>" & assoc.Role1.Documentation & "</documentation>"
	Print #1, "</role>"
	Print #1, "<role><end>2</end>"
	Print #1, "<name>" & assoc.Role2.Name & "</name>"
	Print #1, "<classname>" & assoc.Role2.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role2.Cardinality & "</cardinality>"
	Print #1, "<documentation>" & assoc.Role2.Documentation & "</documentation>"
	Print #1, "</role>"
	If Not assoc.LinkClass Is Nothing Then
		Print #1, "<associative>" & assoc.LinkClass.Name & "</associative>"
	End If
	Print #1, "</association>"
End Sub

Sub DumpInheritance (o As class)
	Dim irels As InheritRelationCollection
	Set irels = o.GetInheritRelations()
	For r = 1 To irels.Count
		Print "    inheritance"
		Print #1, "<inheritance>"
		Print #1, "<name>" & irels.GetAt(r).Name & "</name>"
		Print #1, "<documentation>" & irels.GetAt(r).Documentation & "</documentation>"
		Print #1, "<child>" & o.Name & "</child>"
		Print #1, "<parent>" & irels.GetAt(r).GetSupplierClass().Name & "</parent>" 
		Print #1, "</inheritance>"
	Next r
End Sub

Sub DumpRelationships (domain As Category)
	Print "  relationships in "	& domain.Name
	Dim assocs As AssociationCollection
	Set assocs = domain.Associations
	For associd = 1 To assocs.Count
		DumpAssociation (assocs.getAt (associd))
	Next associd
	Dim classes As ClassCollection
	Set classes = domain.Classes
	For clid = 1 To classes.Count
		DumpInheritance (classes.GetAt(clid))
	Next clid
	Dim children As CategoryCollection
	Set children = domain.Categories
	For chid = 1 To children.Count
		Dim child As Category
		Set child = children.getAt (chid)
		If child.Stereotype = "generate" Then
			DumpRelationships (child)
		End If
	Next chid
End Sub

Sub DumpDomainData (domain As Category, dirName As String)
	Dim rawName As String
	rawName = domain.Name
	For i = 1 To Len(rawName)
		If Mid(rawName, i, 1) = " " Then
			Mid(rawName, i, 1) = "_"
		End If
	Next i
	rawName = dirName + rawName + ".raw"
	Print "file chosen: " & rawName
	Open (rawName) For Output Access Write As #1
	Print "domain "	& domain.Name
	Dim s As String
	s = domain.Stereotype
	If Len(s) = 0 Then
		Print #1, "<domain>"
	Else
		Print #1, "<domain stereotype=" & chr(34) & s & chr(34) & ">"
	End If
	'the following line is edited by the Makefile when generating
	'extractor.ebs from ddf.ebs
	Print #1, "<extractor>cf-DATE</extractor>"
	'domain name
	Print #1, "<name>" + domain.Name + "</name>"
	'date, time
	Print #1, "<date>"
	Print #1, "<year>" & DatePart("yyyy", Date)	& "</year>"
	Print #1, "<month>" & DatePart("m", Date)	& "</month>"
	Print #1, "<day>" & DatePart("d", Date)	& "</day>"
	Print #1, "<time>" & format (time, "Short Time") & "</time>"
	Print #1, "</date>"
	Print #1, "<documentation>" + domain.Documentation + "</documentation>"
	Print #1, "<classes>"
	DumpClasses (domain)
	Print #1, "</classes>"
	Print #1, "<relationships>"
	DumpRelationships (domain)
	Print #1, "</relationships>"
	Print #1, "</domain>"
	Close #1
End Sub

Sub LoadUnits (cat As Category)
	'ensure cat, and all its child units, are loaded.

	Dim u As ControllableUnit
	Set u = cat.TypeCast(u)
	Dim wasLoaded As Boolean
	' need to check first, or Rose gets confused about
	' whether already-loaded units have been modified
	wasLoaded = u.IsLoaded()
	If Not wasLoaded Then
		Dim dummy As Boolean
		dummy = u.Load()
	End If
	If wasLoaded Then
		Print "Cat " & cat.Name
	Else
		Print "Cat " & cat.Name & " (loaded)"
	End If

	Dim items As CategoryCollection
	Set items = cat.Categories
 	For i = 1 To items.Count
		Dim c As Category
		Set c = items.GetAt(i)
		LoadUnits(c)
	Next i

End Sub

Sub Main

	'ordinary Print output goes to this window, if it's open.
	'Viewport.Open

	Dim directory As String
	If RoseApp.PathMap.HasEntry("COLDFRAMEOUT") Then
		directory = RoseApp.PathMap.GetActualPath("$COLDFRAMEOUT") & "\"
	ElseIf Len(Environ("COLDFRAMEOUT")) > 0 Then
		directory = Environ("COLDFRAMEOUT") & "\"
	Else
		directory = ""
	End If

	'S-M OOA Domains are mapped onto Packages.

	Dim diag As Diagram
	Set diag = RoseApp.CurrentModel.GetActiveDiagram()
	If diag Is Nothing Then
		MsgBox "Whatever is active, it's not a Class Diagram"
		End
	End If
	Print "Diagram " & diag.Name
	Dim items As ItemCollection
	Set items = diag.GetSelectedItems()
	If items.Count = 0 Then
		Set items = diag.Items
		If items Is Nothing Then
			MsgBox "There is nothing relevant on this diagram"
			End
		End If
	End If

	Dim packages As Integer
	packages = 0
	Dim result As String
	result = "Domains processed:"
 	For i = 1 To items.Count
		Dim it As Element
		Set it = items.GetAt(i)
		If it.IsClass("Category") Then
			packages = packages + 1
			Dim c As Category
			Set c = it.TypeCast(c)
			LoadUnits(c)
			result = result & Chr(10) & "  " & c.Name
			Call DumpDomainData(c, directory)
		End If
	Next i

	If packages = 0 Then
		MsgBox "There are no Packages on this diagram"
		End
	Else
		MsgBox result
	End If
	
	End

End Sub
