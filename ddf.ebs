'-------------------------------------------------------------------------------
'ddf.ebs
'$Id: ddf.ebs,v 9537a529fb8c 2001/05/24 18:24:38 simon $
'
'	This script exports data from a Rose model to an XML file for further 
'	processing by ColdFrame's normalize-rose.tcl.
'
' Copyright (C) Simon Wright <simon@pushface.org>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2, or (at your option)
' any later version.
' 
' This program is distributed in the hope that it will be useful, but
' WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' General Public License for more details.
' 
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
' USA.
'
'-------------------------------------------------------------------------------

Sub DumpAttributes (o As Class)
	Dim atts As AttributeCollection
	Set atts = o.Attributes
	Print "    attributes"					
	Print #1, "<attributes>"
	For attid = 1 To atts.Count
		Dim a As Attribute
		Dim s As String
		Set a = atts.GetAt(attid)
		s = a.Stereotype
		If Len(s) > 0 Then
			Print #1, "<attribute " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<attribute>"
		End If
		Print "      " & a.Name	& " : " & a.Type
		Print #1, "<name>" & a.Name & "</name>"
		Print #1, "<documentation>" & a.Documentation & "</documentation>"
		Print #1, "<type>" &  a.Type & "</type>"
		Print #1, "<initial>" & a.InitValue & "</initial>"
		Print #1, "</attribute>"
	Next attid
	Print #1, "</attributes>"
End Sub

Sub DumpParameters(op As Operation)
	Dim pars As ParameterCollection
	Set pars = op.Parameters
	Print #1, "<parameters>"
	For parid = 1 To pars.Count
		Dim p As Parameter
		Set p = pars.GetAt(parid)
		Dim s As String
		s = p.Stereotype
		If Len(s) > 0 Then
			Print #1, "<parameter " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<parameter>"
		End If
		Print #1, "<name>" & p.Name & "</name>"
		Print #1, "<documentation>" & p.Documentation & "</documentation>"
		Print #1, "<type>" & p.Type & "</type>"
		Print #1, "<initial>" & p.InitValue & "</initial>"
		Print #1, "</parameter>"
	Next parid
	Print #1, "</parameters>"
End Sub

Sub DumpOperations (o As Class)
	Dim ops As OperationCollection
	Set ops = o.Operations
	Print "    operations"
	Print #1, "<operations>"
	For opid = 1 To ops.Count
		Dim op As Operation
		Set op = ops.GetAt(opid)
		Dim s As String
		s = op.Stereotype
		If Len(s) > 0 Then
			Print #1, "<operation " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<operation>"
		End If
		Print #1, "<name>" & op.Name & "</name>"
		Print #1, "<documentation>" & op.Documentation & "</documentation>"
		If Len(op.ReturnType) > 0 Then
 			Print #1, "<return>" &  op.ReturnType & "</return>"
		End If
		DumpParameters (op)
		Print #1, "</operation>"
	Next opid
	Print #1, "</operations>"
End Sub

Function StateName (s As State) As String
	If Len(s.Name) = 0 Then
		If s.StateKind = "Initial" Then
			StateName = "initial"
		Else
			If s.StateKind = "Final" Then
				StateName = "final"
			Else
				StateName = "anonymous!"
			End If
		End If
	Else
		StateName = s.Name
	End If
End Function

Sub DumpAction(a As Action)
	Print #1, "<action>"
	Print #1, "<name>" & a.Name & "</name>"
'	Print #1, "<target>" & a.Target & "</target>"
	Print #1, "<arguments>" & a.Arguments & "</arguments>"
	Print #1, "</action>"
End Sub

Sub DumpEntryActions(s As State)
	Dim eas As ActionCollection
	Set eas = s.GetEntryActions()
	Print #1, "<entryactions>"
	For e = 1 To eas.Count
		DumpAction(eas.GetAt(e))
	Next e
	Print #1, "</entryactions>"
End Sub

Sub DumpEvent(e As Event)
	'NB we don't do Guard Conditions or Actions.
	Print #1, "<event>"
	Print #1, "<name>" + e.Name + "</name>"
	If Len(e.Arguments)	> 0 Then
 		Print #1, "<arguments>" + e.Arguments + "</arguments>"
	End If
	Print #1, "</event>"
End Sub

Sub DumpStates (c As Class)
	'NB we only do single-level State Machines and Entry Actions.
	Dim sm As StateMachine
	Set sm = c.StateMachine
	If sm Is Not Nothing Then
		Print "  state machine"
		Print #1, "<statemachine>"
		Dim ss As StateCollection
		Set ss = sm.GetAllStates()
   		Print #1, "<states>"
		For s = 1 To ss.Count
			Dim st As State
			Set st = ss.GetAt(s)
			If st.StateKind = "Initial" Then
		   		Print #1, "<state initial=" & Chr(34) & "yes" & Chr(34) & ">"
			Else
				If st.StateKind = "Final" Then
					Print #1, "<state final=" & Chr(34) & "yes" & Chr(34) & ">"
				Else
					Print #1, "<state>"
				End If
			End If
			Print #1, "<name>" + StateName(st) + "</name>"
			DumpEntryActions(st)
			Print #1, "</state>"			
		Next s
		Print #1, "</states>"
		Dim trs As TransitionCollection
		Set trs = sm.GetAllTransitions()
		Print #1, "<transitions>"
		For t = 1 To trs.Count
			Dim tr As Transition
			Set tr = trs.GetAt(t)
			Print #1, "<transition>"
			Print #1, "<source>" & StateName(tr.GetSourceState()) & "</source>"
			Print #1, "<target>" & StateName(tr.GetTargetState()) & "</target>"
			DumpEvent(tr.GetTriggerEvent())
			Print #1, "</transition>"
		Next t
		Print #1, "</transitions>"
		Print #1, "</statemachine>"
	End If
End Sub

Sub DumpClass (o As Class)
	Print "  class " & o.Name
	Dim s As String
	s = o.stereotype
	If Len(s) > 0 Then
	  	Print #1, "<class stereotype=" & Chr(34) & o.Stereotype & Chr(34) & ">"
	Else
		Print #1, "<class>"
	End If	
	Print #1, "<name>" & o.Name & "</name>"
	Print #1, "<documentation>" & o.Documentation & "</documentation>"
	Print #1, "<cardinality>" & o.Cardinality & "</cardinality>"
	DumpAttributes (o)
	DumpOperations (o)
	DumpStates (o)
	Print #1, "</class>"
End Sub

Sub DumpClasses (domain As Category)
	Dim classes As ClassCollection
	Set classes = domain.Classes
	Print #1, "<classes>"
	For clid = 1 To classes.Count
		DumpClass (classes.GetAt (clid))
	Next clid
	Print #1, "</classes>"
End Sub

Sub DumpAssociation (assoc As Association)
	'NB the role name is a verb phrase of which the class is the object
	' -- the class at the other End being the subject.
	Print "    association"
	Print #1, "<association>"
	Print #1, "<name>" & assoc.Name & "</name>"
	Print #1, "<documentation>" & assoc.Documentation & "</documentation>"
	Print #1, "<role><end>1</end>"
	Print #1, "<name>" & assoc.Role1.Name & "</name>"
	Print #1, "<classname>" & assoc.Role1.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role1.Cardinality & "</cardinality>"
	Print #1, "<documentation>" & assoc.Role1.Documentation & "</documentation>"
	Print #1, "</role>"
	Print #1, "<role><end>2</end>"
	Print #1, "<name>" & assoc.Role2.Name & "</name>"
	Print #1, "<classname>" & assoc.Role2.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role2.Cardinality & "</cardinality>"
	Print #1, "<documentation>" & assoc.Role2.Documentation & "</documentation>"
	Print #1, "</role>"
	If Not assoc.LinkClass Is Nothing Then
		Print #1, "<associative>" & assoc.LinkClass.Name & "</associative>"
	End If
	Print #1, "</association>"
End Sub

Sub DumpInheritance (o As class)
	Dim irels As InheritRelationCollection
	Set irels = o.GetInheritRelations()
	For r = 1 To irels.Count
		Print "    inheritance"
		Print #1, "<inheritance>"
		Print #1, "<name>" & irels.GetAt(r).Name & "</name>"
		Print #1, "<documentation>" & irels.GetAt(r).Documentation & "</documentation>"
		Print #1, "<child>" & o.Name & "</child>"
		Print #1, "<parent>" & irels.GetAt(r).GetSupplierClass().Name & "</parent>" 
		Print #1, "</inheritance>"
	Next r
End Sub

Sub DumpRelationships (domain As Category)
	Print "  relationships"
	Print #1, "<relationships>"
	Dim assocs As AssociationCollection
	Set assocs = domain.Associations
	For associd = 1 To assocs.Count
		DumpAssociation (assocs.getAt (associd))
	Next associd
	Dim classes As ClassCollection
	Set classes = domain.Classes
	For clid = 1 To classes.Count
		DumpInheritance (classes.GetAt(clid))
	Next clid
	Print #1, "</relationships>"
End Sub

Sub DumpDomainData (domain As Category)
	Dim rawName As String
	rawName = SaveFileName$ ("Choose a file for extraction", "Extracted data:*.raw")
	If Len(rawName) = 0 Then
	  	End
	End If 
	Open (rawName$) For Output Access Write As #1
	Print "domain "	& domain.Name
	Dim s As String
	s = domain.Stereotype
	If Len(s) = 0 Then
		Print #1, "<domain>"
	Else
		Print #1, "<domain stereotype=" & chr(34) & s & chr(34) & ">"
	End If
	'domain name
	Print #1, "<name>" + domain.Name + "</name>"
	'get date in external processing (must be a way!)
	Print #1, "<documentation>" + domain.Documentation + "</documentation>"
	DumpClasses (domain)
	DumpRelationships (domain)
	Print #1, "</domain>"
	Close #1
End Sub

Sub Main
	'S-M OOA Domains are mapped onto Packages. Output data for the
	'(only) selected Package (Category?!)
	Dim cats As CategoryCollection
	'ordinary Print output goes to this window, if it's open.
	Viewport.Open
	Set cats = RoseApp.CurrentModel.GetSelectedCategories()
	If cats.Count = 0 Then
		MsgBox "Must select a Package"
		End
	End If
	If cats.Count > 1 Then
		MsgBox "Must select only one Package"
		End
	End If
	For cid = 1 To cats.Count
		Dim cat As Category
		Set cat = cats.GetAt(cid)
		DumpDomainData (cat)
	Next cid   
End Sub
