'--------------------------------------------------------------------------------
'ddf.ebs
'$Id: ddf.ebs,v 6e8842199da3 2000/12/16 14:54:00 simon $
'
'	This script exports data from a Rose model to an XML file for further 
'	processing by the Object Oriented Model Compiler.
'
' Copyright (C) Simon Wright <simon@pushface.org>
'--------------------------------------------------------------------------------

Sub DumpObjectRelationInfo (o As Class)
	'doesn't handle the supertype end of super/sub relationships
	'XXX I think this needs just to dump the _names_ of the relations ???
	Print "    relations"
	Print #1, "<relations>"
	Dim assocs As AssociationCollection
	Set assocs = o.GetAssociations()
	For a = 1 To assocs.Count
		Print #1, "<relation>" & assocs.GetAt(a).Name & "</relation>"
	Next a
	Dim irels As InheritRelationCollection
	Set irels = o.GetInheritRelations()
	For r = 1 To irels.Count
		Print #1, "<relation>" & irels.GetAt(r).Name & "</relation>"
		Print "relation " & irels.GetAt(r).Name & ", supplier "	& irels.GetAt(r).GetSupplierClass().name
	Next r
	Print #1, "</relations>"
End Sub	

Sub DumpTagInfo (o As Class)
	Print "    tags"
	Print #1, "<tags>"
	Print #1, "</tags>"
End Sub

Sub DumpStatusAttribute (o As Class)
	'the Status attribute is an extra attribute, needed if there's an STT.
	'I expect it will be auto-generated when I get round to STTs.
End Sub

Sub DumpAttributes (o As Class)
	Dim atts As AttributeCollection
	Set atts = o.Attributes
	Print "    attributes"					
	Print #1, "<attributes>"
	For attid = 1 To atts.Count
		Dim a As Attribute
		Dim s As String
		Set a = atts.GetAt(attid)
		s = a.Stereotype
		If Len(s) > 0 Then
			Print #1, "<attribute " & "stereotype=" & Chr(34) & s & Chr(34) & ">"
		Else
			Print #1, "<attribute>"
		End If
		Print "      " & a.Name	& " : " & a.Type
		Print #1, "<name>" & a.Name & "</name>"
		Print #1, "<type>" &  a.Type & "</type>"
		Print #1, "<protection>" & a.ExportControl.Name & "</protection>"
		Print #1, "</attribute>"
	Next attid
	DumpStatusAttribute (o)
	Print #1, "</attributes>"
End Sub

Sub DumpParameters(op As Operation)
	Dim pars As ParameterCollection
	Set pars = op.Parameters
	Print #1, "<parameters>"
	For parid = 1 To pars.Count
		Dim p As Parameter
		Set p = pars.GetAt(parid)
		If Len(p.Const) > 0 Then
			Print #1, "<parameter const=" & Chr(34) & "yes" & Chr(34) & ">"
		Else
			Print #1, "<parameter>"
		End If
		Print #1, "<name>" & p.Name & "</name>"
		Print #1, "<type>" & p.Type & "</type>"
		Print #1, "<initial>" & p.InitValue & "</initial>"
		Print #1, "<documentation>" & p.Documentation & "</documentation>"
		Print #1, "</parameter>"
	Next parid
	Print #1, "</parameters>"
End Sub

Sub DumpOperations (o As Class)
	Dim ops As OperationCollection
	Set ops = o.Operations
	Print "    operations"
	Print #1, "<operations>"
	For opid = 1 To ops.Count
		Dim op As Operation
		Set op = ops.GetAt(opid)
		Print #1, "<operation>"
		Print #1, "<name>" & op.Name & "</name>"
		If Len(op.ReturnType) > 0 Then
			Print #1, "<return>" &  op.ReturnType & "</return>"
		End If
		DumpParameters (op)
		Print #1, "</operation>"
	Next opid
	Print #1, "</operations>"
End Sub

Sub DumpClass (o As Class)
	Print "  object " & o.Name
	Print #1, "<object stereotype=" & Chr(34) & o.Stereotype & Chr(34) & ">"
	Print #1, "<name>" & o.Name & "</name>"
	Print #1, "<documentation>" & o.Documentation & "</documentation>"
	DumpTagInfo (o)
	DumpAttributes (o)
	DumpOperations (o)
	Print #1, "</object>"
End Sub

Sub DumpClasses (domain As Category)
	Dim classes As ClassCollection
	Set classes = domain.Classes
	Print #1, "<objects>"
	For clid = 1 To classes.Count
		DumpClass (classes.GetAt (clid))
	Next clid
	Print #1, "</objects>"
End Sub

Sub DumpAssociation (assoc As Association)
	'NB the role names assume the opposite convention from KC's: the role name is a
	' verb phrase of which the class is the subject -- the class at the other end
	' being the object
	Print "    association"
	Print #1, "<association>"
	Print #1, "<name>" & assoc.Name & "</name>"
	Print #1, "<role><end>1</end>"
	Print #1, "<name>" & assoc.Role1.Name & "</name>"
	Print #1, "<classname>" & assoc.Role1.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role1.Cardinality & "</cardinality>"
	Print #1, "<exportcontrol>" & assoc.Role1.ExportControl & "</exportcontrol>"
	Print #1, "</role>"
	Print #1, "<role><end>2</end>"
	Print #1, "<name>" & assoc.Role2.Name & "</name>"
	Print #1, "<classname>" & assoc.Role2.Class.Name & "</classname>"
	Print #1, "<cardinality>" & assoc.Role2.Cardinality & "</cardinality>"
	Print #1, "<exportcontrol>" & assoc.Role2.ExportControl & "</exportcontrol>"
	Print #1, "</role>"
	If Not assoc.LinkClass Is Nothing Then
		Print #1, "<associative>" & assoc.LinkClass.Name & "</associative>"
	End If
	Print #1, "</association>"
End Sub

Sub DumpInheritance (o As class)
	Dim irels As InheritRelationCollection
	Set irels = o.GetInheritRelations()
	For r = 1 To irels.Count
		Print "    inheritance"
		Print #1, "<inheritance>"
		Print #1, "<name>" & irels.GetAt(r).Name & "</name>"
		Print #1, "<child>" & o.Name & "</child>"
		Print #1, "<parent>" & irels.GetAt(r).GetSupplierClass().Name & "</parent>" 
		Print #1, "</inheritance>"
	Next r
End Sub

Sub DumpRelationships (domain As Category)
	Print "  relationships"
	Print #1, "<relationships>"
	Dim assocs As AssociationCollection
	Set assocs = domain.Associations
	For associd = 1 To assocs.Count
		DumpAssociation (assocs.getAt (associd))
	Next associd
	Dim classes As ClassCollection
	Set classes = domain.Classes
	For clid = 1 To classes.Count
		DumpInheritance (classes.GetAt(clid))
	Next clid
	Print #1, "</relationships>"
End Sub

Sub DumpDataType (cls As Class)
	Print #1, "<userdatatype>"
	Print #1, "<name>" & cls.Name & "</name>"
	Print #1, "<documentation>" & cls.Documentation & "</documentation>"
	Print #1, "</userdatatype>"
End Sub

Sub DumpDataTypes (domain As Category)
'	We look for a Category named Types, whose Classes correspond to
'	type specifications.
	Dim cats As CategoryCollection
	Set cats = domain.Categories
	For catid = 1 To cats.Count
		If cats.GetAt (catid).Name = "Types" Then
			Print "  datatypes"
			Print #1, "<datatypes>"
			Dim cls As ClassCollection
			Set cls = cats.GetAt (catid).Classes
			For clsid = 1 To cls.Count
				DumpDataType (cls.GetAt (clsid))
			Next clsid
			Print #1, "</datatypes>"
		End If
	Next catid
End Sub

Sub DumpTypesFiles (domain As Category)
	Print "  typesfiles"
	Print #1, "<typesfiles>"
	Print #1, "</typesfiles>"
End Sub

Sub DumpTransitionTables (domain As Category)
	Print "  transitiontables"
	Print #1, "<transitiontables>"
	Print #1, "</transitiontables>"
End Sub

Sub DumpTerminators (domain As Category)
	Print "  terminators"
	Print #1, "<terminators>"
	Print #1, "</terminators>"
End Sub

Sub DumpDomainData (domain As Category)
	Open (domain.Name + ".raw") For Output Access Write As #1
	Print "domain "	& domain.Name
	Dim s As String
	s = domain.Stereotype
	If Len(s) = 0 Then
		Print #1, "<domain>"
	Else
		Print #1, "<domain stereotype=" & chr(34) & s & chr(34) & ">"
	End If
	'domain name
	Print #1, "<name>" + domain.Name + "</name>"
	'get date in external processing (must be a way!)
	DumpClasses (domain)
	DumpRelationships (domain)
	DumpDataTypes (domain)
	DumpTypesFiles (domain)
	DumpTransitionTables (domain)
	DumpTerminators (domain)
	Print #1, "</domain>"
	Close #1
End Sub

Sub Main
	'S-M OOA Domains are mapped onto Packages. Output data for the
	'(only) selected Package (Category?!)
	Dim cats As CategoryCollection
	'ordinary Print output goes to this window
	Viewport.Open
	Set cats = RoseApp.CurrentModel.GetSelectedCategories()
	For cid = 1 To cats.Count
		Dim cat As Category
		Set cat = cats.GetAt(cid)
		DumpDomainData (cat)
	Next cid   
End Sub
